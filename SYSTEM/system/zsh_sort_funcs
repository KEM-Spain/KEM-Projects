#!/usr/bin/zsh
# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Declarations
typeset -A _BLACKLIST=(usage 1 parse_opts 1 opt_type 1 opt_exists 1)
typeset -A SEEN

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/MSG.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Functions
cleanup () {
	[[ ${REPLACE_SORTED} == 'true' ]] && rm -f ${FN}.sorted.functions || rm -f ${FN}.new
	rm -f ${FN}.normalized
	[[ -L ${FN} ]] && unlink ${FN}
	exit_leave
}

delete_func () {
	local FUNC=${1}
	local FN=${2}

	[[ ${_BLACKLIST[${FUNC}]} -eq 1 ]] && return

	sed -i "/${FUNC}.*() {/,/^}/d" ${FN}
}

list_func () {
	local FN=${1}

	grep --color=never -P "^\S.*\(\) {$" < ${FN} | cut -d'(' -f1 | sed -e 's/^[[:space:]]*//'
}

normalize_functions () {
	local FN=${1}

	perl -pe 's/^(function\s+)(.*) (\{.*)/${2} () ${3}/g; s/([a-z])(\(\))/${1} ${2}/g; s/\(\) \(\)/\(\)/g; s/(^})(.*)/${1}/g; s/^[ \t]*}$/}/g' < ${FN} > ${FN}.normalized
}

print_func () {
	local FUNC=${1}
	local FN=${2}
	
	[[ ${_BLACKLIST[${FUNC}]} -eq 1 ]] && return 1

	perl -ne "print if /^${FUNC} \(\) {$/ .. /^}$/" ${FN} | perl -pe 's/^}$/}\n/g'
}

replace_functions () {
	local FN=${1}
	local L

	[[ ! -e ${FN}.sorted.functions ]] && echo "Unable to proceed.  No file containing sorted functions found." && cleanup

	# Prepend function section if needed
	grep -i '#functions' < ${FN}.normalized
	if [[ $? -ne 0 ]];then
		sed -i '0,/.*() {$/s/.*() {$/#Functions\n&/' ${FN}.normalized
	fi

	LIST=($(list_func ${FN}.normalized))

	# Delete existing funcs
	for L in ${(o)LIST};do
		delete_func ${L} ${FN}.normalized
	done

	# Insert sorted funcs
	sed -i "/^#Functions/r ${FN}.sorted.functions" ${FN}.normalized
}

sort_functions () {
	local FN=${1}
	local -a LIST
	local L
	local NDX=0

	[[ ! -e ${FN}.normalized ]] && echo "Unable to proceed.  No file containing normalized functions found." && cleanup
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} ${FN}.normalized was created..."

	grep -Pq '^\S*\s\(\) {' <${FN}.normalized
	[[ $? -ne 0 ]] && echo "No functions found in file: ${FN}\n" && cleanup

	LIST=($(list_func ${FN}.normalized))
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} LIST:${LIST}"

	# Sort function alpha
	for L in ${(o)LIST};do
		[[ ${USE_BLACKLIST} == 'true' && ${_BLACKLIST[${L}]} -eq 1 ]] && continue
		((NDX++))
		if [[ ${LIST_FUNCS} == 'true' ]];then
			[[ ${NDX} -eq 1 ]] && echo "${WHITE_FG}Functions in ${FN}${RESET}"
			echo "${WHITE_FG}${NDX}${RESET}) ${L}"
		else
			tput el; printf "\rProcessing function ${WHITE_FG}%d${RESET} of ${WHITE_FG}%d${RESET} functions ${WHITE_FG}%%${BOLD}${GREEN_FG}%.2f${RESET}" ${NDX} ${#LIST} $(( NDX * 100. / ${#LIST} ))
			print_func ${L} ${FN}.normalized >>${FN}.sorted.functions
		fi
	done
	[[ ${LIST_FUNCS} == 'false' ]] && echo "\n${WHITE_FG}${NDX}${RESET} ${FN} functions written\nto:${WHITE_FG}${FN}.sorted.functions${RESET}\nby function name in alphanumeric order"
	[[ -e ${FN}.normalized ]] && /bin/rm -f ${FN}.normalized # No longer needed
	echo
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

SCRIPT=${0:t}

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		b) echo "<BLACKISTED FUNCTION>";;
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		t) echo "<FILE_TYPE>";;
	esac
}

read -r -d '' DESC<<EOF
Sort script functions
\n\tSorted script functions may be placed:
\n\t1) into a copy of the original as $(opt_type f).new (-r)
\t2) into the original file with functions now sorted (-R)
\t3) into a separate ${ITALIC}functions only${RESET} file: $(opt_type f).sorted.functions (${WHITE_FG}default${RESET})
EOF

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${OPTS} $(opt_type f)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-B${RESET} no blacklist"
	echo -e "${WHITE_FG}-b $(opt_type b)${RESET} add blacklisted function"
	echo -e "${WHITE_FG}-l${RESET} list the functions in $(opt_type f)"
	echo -e "${WHITE_FG}-r${RESET} create a file $(opt_type f).new with sorted functions"
	echo -e "${WHITE_FG}-R${RESET} replace file:$(opt_type f) with sorted functions"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	exit_leave $(msg_err "${PENDING_MSGS}")
}

OPTSTR=":HDRBb:lr"

REPLACE_SORTED=false
REPLACE_FILE=false
LIST_FUNCS=false
USE_BLACKLIST=true

OPTIND=0
while getopts ${OPTSTR} OPTION;do
	case ${OPTION} in
     H) usage;;
     D) dbg_set_level;;
     B) USE_BLACKLIST=false;;
	  b) _BLACKLIST[${OPTARG}]=1;;
	  l) LIST_FUNCS=true;;
     r) REPLACE_SORTED=true;;
     R) REPLACE_FILE=true;;
     :) print -u2 "${SCRIPT}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${SCRIPT}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}"; usage;;
	esac
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
FN=${1}
[[ ! -e ${FN} ]] && usage "Missing argument:$(opt_type f)"
[[ ! -e ${PWD}/${FN:t} ]] && ln -s ${FN} ${PWD} # Link file
FN=${PWD}/${FN:t}

[[ -e ${FN}.normalized ]] && rm -f ${FN}.normalized
[[ -e ${FN}.sorted.functions ]] && rm -f ${FN}.sorted.functions

if [[ ${USE_BLACKLIST} == 'true' ]];then
	echo "${WHITE_FG}Blacklisted Functions${RESET}:"
	for B in ${(k)_BLACKLIST};do
		echo "${CYAN_FG}${B}${RESET}"
	done
	echo
fi

normalize_functions ${FN} # Normalize function declaration syntax
sort_functions ${FN} # Extract sorted functions

# Early exits
[[ ${LIST_FUNCS} == 'true' ]] && exit_leave # Option was invoked in sort_functions
[[ ! -e ${FN}.sorted.functions ]] && exit_leave $(msg_err "sort_functions: failed to create and output. Exiting.")

# Processing
grep '() {' < ${FN}.sorted.functions | sort | uniq -c | grep -v -P '\s+1\s+'
[[ ${?} -ne 1 ]] && exit_leave $(msg_warn "WARNING:Found duplicates")

if [[ ${REPLACE_FILE} == 'true' || ${REPLACE_SORTED} == 'true' ]];then 
	replace_functions ${FN}
	[[ ! -e ${FN}.normalized ]] && exit_leave $(msg_err "Option -r failed - unable to locate ${FN}.normalized")
	cat -s ${FN}.normalized | cat -s > ${FN}.new
	echo "Modified script with sorted functions in file:${FN}.new"
fi

if [[ ${REPLACE_FILE} == 'true' ]];then 
	[[ ! -e ${FN}.new ]] && exit_leave $(msg_err "Option -R failed - unable to locate ${FN}.new")
	mv -f ${FN}.new ${FN}
	chmod 775 ${FN}
	[[ ! -e ${FN}.sort_functions ]] && rm -f ${FN}.sort_functions # Cleanup
	echo "Replaced original file: ${FN} with sorted functions"
fi

cleanup
exit_leave
