#!/usr/bin/zsh
RESET="\033[m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"
BOLD="\033[1m"

# Declarations
typeset -a _DESKTOP_LIST=()
typeset -A _APP_ALT_NAMES=(deluge deluge-gtk org.kde.haruna haruna)

# Constants
_DESKTOP_DIR=/usr/share/applications
_LAUNCHER_DIR=/usr/local/bin/system/launchers

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

# Functions
get_file_state () {
	local FN=${1}
	local LAST_FILE_REFRESH=0
	local CURR_FILE_TIME
	local STAMP_FILE=${_LAUNCHER_DIR}/.${FN:t}

	[[ -e ${FN} ]] || return 1
	[[ -e ${STAMP_FILE} ]] && LAST_FILE_REFRESH=$(<${STAMP_FILE}) # Get state

	CURR_FILE_TIME=$(stat -c %Z ${FN}(:A)) # File change time in seconds; the modifier `(:A)` resolves any symbolic links

	if [[ ${LAST_FILE_REFRESH} -lt ${CURR_FILE_TIME} ]]; then
		sudo touch ${FN}
		CURR_FILE_TIME=$(stat -c %Z ${FN}) # File change time in seconds
		echo "${CURR_FILE_TIME}" > ${STAMP_FILE} # Set state
		echo "stale"
	else
		echo "current"
	fi
}

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Modify desktop file in ${_DESKTOP_DIR} to
\texecute a custom launcher instead of the default
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DESKTOP_FILE>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type d)]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-f${RESET} force tweak"
	echo -e "${WHITE_FG}-s${RESET} simulation mode"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	echo ${PENDING_MSGS}
	exit_leave
}

OPTSTR=":HDfs"
OPTIND=0

SIMULATE=false
FORCE=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     f) FORCE=true;;
     s) SIMULATE=true;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
[[ -n ${1} ]] && FILE_ARG=${1} || FILE_ARG=''

_LAUNCHER_LIST=("${(f)$(find ${_LAUNCHER_DIR}/run_*)}") # Launchers format: run_<APPNAME>

for L in ${_LAUNCHER_LIST};do
	APP=$(echo ${L} | cut -d '_' -f2) # Remove 'run_' prefix of launcher
	DESKTOP_FILE=$(find ${_DESKTOP_DIR} -iname "${APP}.desktop" 2>/dev/null) # Find matching system desktop file
	[[ -n ${DESKTOP_FILE} ]] && _DESKTOP_LIST+=${DESKTOP_FILE:t}
done

# Scan desktop files for stale versions
for L in ${_DESKTOP_LIST};do
	APP="run_${L:r}"
	STATUS=$(get_file_state ${_DESKTOP_DIR}/${L})

	if [[ -n ${FILE_ARG} ]];then
		if [[ ! ${L:r} == ${FILE_ARG} ]];then
			continue
		fi
	fi

	if [[ ${SIMULATE} == 'true' ]];then
		printf "[${WHITE_FG}%15s${RESET}] Desktop file:${WHITE_FG}%s${RESET} is $(boolean_color ${STATUS})%-10s${RESET}\n" ${0:t} ${L} ${STATUS}
	fi

	if [[ ${STATUS} == "stale" || ${FORCE} == 'true' ]];then
		[[ ${FORCE} == 'true' ]] && echo "${BOLD}${RED_FG}FORCE${RESET} will update ${WHITE_FG}${L:r}${RESET} regardless of status"
		if [[ ${SIMULATE} == 'true' ]];then
			echo "${MAGENTA_FG}SIMULATE${RESET}: ${WHITE_FG} create backup:${_DESKTOP_DIR}/${L} to ${_DESKTOP_DIR}/${L}.orig${RESET}"
		else
			sudo cp ${_DESKTOP_DIR}/${L} ${_DESKTOP_DIR}/${L}.orig # Backup original
		fi

		APP_RUNNER=${_LAUNCHER_DIR}/${APP}
		APP_NAME=${_APP_ALT_NAMES[${L}]}
		[[ -z ${APP_NAME} ]] && APP_NAME=${L}

		EXEC=$(grep Exec ${_DESKTOP_DIR}/${APP_NAME} | head -1 | cut -d= -f2 | cut -d' ' -f1)

		if [[ ${SIMULATE} == 'true' ]];then
			echo "${MAGENTA_FG}SIMULATE${RESET}: ${WHITE_FG} extract Exec lines from desktop file...${RESET}"
			echo ${EXEC}
		fi

		if [[ ${SIMULATE} == 'true' ]];then
			echo "${MAGENTA_FG}SIMULATE${RESET}: ${WHITE_FG} apply edits to original desktop file...${WHITE_FG}Exec=${APP_RUNNER}${RESET}"
		else
			sudo sed -i "s#Exec=${EXEC}#Exec=${APP_RUNNER}#g" ${_DESKTOP_DIR}/${L}
			[[ ${?} -eq 0 ]] && MSG="SUCCESS - desktop file was modified" || MSG="ERROR - desktop file was NOT modified"
			printf "${BOLD}Desktop file${RESET}:%s ... %s to %s\n" ${_DESKTOP_DIR}/${L} ${MSG} ${_LAUNCHER_DIR}/${APP}
		fi
	fi
done

