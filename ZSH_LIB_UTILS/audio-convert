#!/usr/bin/zsh
#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Convert audio formats
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		f) echo "<FROM_EXT>";;
		t) echo "<TO_EXT>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} $(opt_type f) $(opt_type t)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	echo "\n$(msg_warn ${PENDING_MSGS})"
	exit_leave
}

OPTSTR=":HD"
OPTIND=0

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--
#Execution
 
if [[ ${#} -ne 2 ]];then
	usage $(msg_warn "Need 2 arguments: $(opt_type f) $(opt_type t)")
else
	FROM_EXT=${1}
	TO_EXT=${2}
fi

LIST=("${(f)$(find . -maxdepth 1 -type f -name "*${FROM_EXT}")}")

if ! arr_is_populated "${LIST}";then
	exit_leave $(msg_warn "No files with extension:${FROM_EXT} found")
fi

NDX=0
for L in ${LIST};do
	[[ ! $(file ${L}) =~ 'audio' ]] && continue

	((NDX++))
	echo "Converting ${L:q} to ${L:r:q}.${TO_EXT} ${WHITE_FG}${NDX}${RESET} of ${WHITE_FG}${#LIST}${RESET}"

	[[ -e ${L:r}.${TO_EXT} ]] && continue # no overwrites

	ffmpeg -loglevel quiet -i ${L} -c:v copy -c:a libmp3lame -q:a 0 ${L:r}.${TO_EXT}
done

exit_leave 
