#!/usr/bin/zsh
#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh # Must be first
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh # Must be last

#--Begin GetOpts--
local -a OPTIONS
local OPTION
local DESC

read -r -d '' DESC<<EOF
Convert audio formats
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		f) echo "<FILE>";;
		t) echo "<TO_EXT>";;
		u) echo "<URL>";;
	esac
}

usage () {
	local -a PENDING_MSGS=(${@})
	local OPTS=$(parse_opts ${OPTSTR})

	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	tabs 5
	(
	echo -e "\n${WHITE_FG}\nUsage${RESET}: ${_SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} $(opt_type f) $(opt_type t)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug (repeats increase level)"
	echo -e "${WHITE_FG}-i${RESET} list available formats $(opt_type u)"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2

	echo "\n$(msg_exit E ${PENDING_MSGS})"
	exit_leave
}

OPTSTR=":HDi:"
OPTIND=0

DL_URL=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
	  i) DL_URL=${OPTARG};;
     :) print -u2 "${RED_FG}${_SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${_SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--
#Execution
#[[ ${_DEBUG} -eq 0 ]] && do_smcup

if [[ ${DL_URL} != 'false' ]];then
	if ! curl --connect-timeout 3 --head --silent "${DL_URL}" >/dev/null 2>&1;then
		exit_leave $(msg_exit E "invalid $(opt_type u)")
	fi
	YT_NM=$(yt --no-warnings -j ${DL_URL} | jq ."filename" 2>/dev/null | tr -d '["]')

	echo Title:${WHITE_FG}${YT_NM:t}${RESET}

	yt --no-warnings --list-formats ${DL_URL} | grep -q audio
	if [[ ${?} -eq 0 ]];then
		echo "\n${CYAN_FG}-- Valid audio formats available for this title --${RESET}\n"
		yt --no-warnings --list-formats ${DL_URL} | grep audio | cut -d' ' -f2 | sort -u
	else
		exit_leave $(msg_exit E "No audio formats for this URL")
	fi

	echo "\n${WHITE_FG}Press any key...${RESET}";read -k1
	exit_leave
fi

if [[ ${#} -ne 2 ]];then
	usage "Need 2 arguments:$(opt_type f) $(opt_type t)"
else
	FN=${1}
	FROM_EXT=${1:e}
	TO_EXT=${2}
fi
[[ ! -e ${FN} ]] && exit_leave $(msg_exit E "File:${FN} not found")

FTYPE=$(file ${FN})
[[ ! ${FTYPE:l} =~ 'audio' ]] && exit_leave $(msg_exit E "Not an audio file")
[[ -e ${FN:r}.${TO_EXT} ]] && exit_leave $(msg_exit E "File: ${FN:r}.${TO_EXT} exists")

echo "Converting ${FN:q} to ${FN:r:q}.${TO_EXT}"

ffmpeg -loglevel error -i ${FN} -c:v copy -c:a libmp3lame -q:a 0 ${FN:r}.${TO_EXT}

exit_leave 
