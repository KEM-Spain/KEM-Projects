#!/usr/bin/zsh

# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Declarations
typeset -A COORDS=(X 10 Y 38 H 10 W 86)
typeset -A _DOWNLOADS
typeset -A _FAILED
typeset -A _FAVORITE_ENGINE
typeset -A _FAVORITE_OPTS
typeset -A _FIELD_LEN
typeset -A _FUTURE
typeset -A _REJECTS
typeset -A _STATUS_MSGS
typeset -a _LOCAL_LIST

# Constants
_ACTION=download
_DOWNLOAD_DIR=~/Downloads/Torrents/Library/web
_SRC_DIR=/usr/local/src
_YTS_DIR=~/.yts
_DOWNLOAD_LOG=${_YTS_DIR}/yts.downloads
_ERROR_LIMIT=5
_ERROR_LOG=/tmp/yts.err
_FIELD_LEN[age]=30
_FIELD_LEN[agetime]=40
_FIELD_LEN[author]=26
_FIELD_LEN[title]=80
_JS_SCRIPT=/usr/local/etc/yts.js
_MARKER=${_YTS_DIR}/.yts-upd.lastrun
_OBJECT=video
_YTS_DBG=2
_YTS_FAVORITES=${_YTS_DIR}/.yts_history
_YTS_GIT=${_SRC_DIR}/yt-dlp

# Globals
g_FAVORITE=''
g_LAST_UPD=?
g_LIST_SUBSET=false
g_LIVE=''
g_LIVE_OPT=''
g_LOG=''
g_PID=?
g_PROXY_CMD=''
g_QRY_ENGINE=''
g_SEARCH_TYPE=''
g_STRICT=false
g_STRICT_MSG=''

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/DATE.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/SEL_LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Functions
action_do () {
	local -a MSGS
	local DEST=''
	local DEST_1=''
	local DEST_2=''
	local DL_CNT=0
	local EMSG=''
	local ERROR_CNT=0
	local ETA=''
	local FRAME_PAD=4
	local HAD_ERROR=false
	local H_CTR=0
	local HDRS_OUT=false
	local HDR_TXT=0
	local HDR_LEN=0
	local HRZ_CTR=0
	local JOB_STALL=10
	local KEY=''
	local L M S 
	local LAST_LOG_SIZE=0
	local LINE_COLOR=''
	local LOG_ACTIVE=false
	local LOG_LINE=''
	local LOG_SIZE=0
	local LOG_STALLS=0
	local NDX=0
	local PAUSE=2
	local PID=0
	local RESUMED_TAG=''
	local SCAN_LIMIT=0
	local TITLE=''
	local URL=''

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	msg_box_clear

	for M in ${_MARKED};do
		((DL_CNT++))
		_DOWNLOADS[${DL_CNT}]=false
		_FAILED[${DL_CNT}]=false
		_FUTURE[${DL_CNT}]=false
		URL=$(get_field url ${M})
		HDRS_OUT=false

		start_job ${URL}
		msg_box -x${COORDS[X]} -y${COORDS[Y]} -h${COORDS[H]} -w${COORDS[W]} "Download requested..."

		# Detect missing log
		if [[ ! -e ${g_LOG} ]];then
			[[ ${NDX} -gt 10 ]] && exit_leave "${g_LOG} not detected" # No activity
		fi

		unsetopt localtraps
		trap kill_job INT

		stty -echo
		while true;do
			((NDX++))
			
			# Process job reset
			KEY=''
			read -s -t0.1 -k1 KEY
			if [[ ${KEY} == 'r' ]];then
				reset_job
				start_job ${URL}
				HAD_ERROR=false
			fi

			LOG_SIZE=$(wc -c < ${g_LOG})
			if [[ ${LOG_SIZE} -ne ${LAST_LOG_SIZE} ]];then
				LOG_STALLS=0 # Log is growing
			else
				((LOG_STALLS++))
				[[ ${LOG_STALLS} -ge ${JOB_STALL} ]] && msg_box -t.2 -x$((COORDS[X]+5)) -y$((COORDS[Y] + COORDS[W] -27)) "<r>Job Stalled<N>"
				LAST_LOG_SIZE=${LOG_SIZE}
				sleep 1 # Extra sleep 
				continue
			fi

			# Scan for resume
			RESUMED_TAG=''
			LOG_LINE=$(grep -m1 -i "resuming download" ${g_LOG})
			if [[ ${?} -eq 0 ]];then
				RESUMED_TAG=' (<w>resumed<N>)'
			fi

			# Get headers
			LOG_LINE=$(grep -m1 -i "destination" ${g_LOG})
			if [[ ${?} -eq 0 && ${HDRS_OUT} == 'false' ]];then
				DEST=("${(f)$(sed -e "s#${_DOWNLOAD_DIR}/#${_DOWNLOAD_DIR}|#g" -e 's/ \[.*//g' <<<${LOG_LINE})}")
				DEST_1=$(cut -d'|' -f1 <<<${DEST})
				DEST_2=$(cut -d'|' -f2 <<<${DEST})
				HDR_TXT="<c>${DEST_1} <N>- <w>${DL_CNT} <N>of <w>${#_MARKED}<N>${RESUMED_TAG}"
				HDR_LEN=$(( ${#$(msg_nomarkup ${HDR_TXT})} ))
				HDR_LEN=$((HDR_LEN + FRAME_PAD))
				HRZ_CTR=$(coord_center $((_MAX_COLS-3)) ${HDR_LEN}) # Horiz center
				[[ ${HDR_LEN} -gt ${COORDS[W]} ]] && COORDS[W]=${HDR_LEN} && COORDS[Y]=${HRZ_CTR} # Adjust frame width/center
				msg_box -c -C -I -H3 -jl -x${COORDS[X]} -y${COORDS[Y]} -h${COORDS[H]} -w${COORDS[W]} ${HDR_TXT}
				msg_box -C -jl "<m>Downloading: <c>${DEST_2[1,60]}<N>"
				msg_box -C -jl "<m>$(str_unicode_line $((COORDS[W]-4)))<N>"
				HDRS_OUT=true
			fi

			# Scan for already downloaded
			LOG_LINE=$(grep -m1 -i "already been" ${g_LOG})
			if [[ ${?} -eq 0 ]];then
				TITLE=$(get_field title ${M})
				EMSG="<w>${TITLE[1,65]}<N>|<g>Has already been downloaded<N>" 
				msg_box -t3 "${EMSG}"
				_DOWNLOADS[${M}]=true
				break # While loop
			fi

			# Scan for not yet available
			LOG_LINE=$(grep -m1 -i "will begin\|premieres\|upcoming" ${g_LOG})
			if [[ ${?} -eq 0 ]];then
				TITLE=$(get_field title ${M})
				EMSG="<w>${TITLE[1,65]}<N>|<r>Not yet available<N>|<g>${LOG_LINE}<N>" 
				msg_box -t3 "${EMSG}"
				_FUTURE[${M}]=true
				_DOWNLOADS[${M}]=false
				break # While loop
			fi

			if [[ ${_DOWNLOADS[${M}]} != 'true' ]];then
				LOG_LINE=$(sed -e 's//\n/g' -e '/./!d' ${g_LOG} | tail -1) 
				
				# Scan for errors
				grep -q -i 'error' <<<${LOG_LINE}
				if [[ ${?} -eq 0 ]];then
					((ERROR_CNT++))
					HAD_ERROR=true
					if [[ ${ERROR_CNT} -ge ${_ERROR_LIMIT} ]];then # consecutive errors >= limit
						TITLE=$(get_field title ${M})	
						EMSG="<w>${TITLE[1,65]}<N>|<r>Download failed - Errors:${ERROR_CNT} Network failure<N>|${LOG_LINE}" 
						msg_box -f80 -p -PK "${EMSG}"
						_FAILED[${M}]=true
						_DOWNLOADS[${M}]=false
						break 2 # Exit log scan
					fi
					case ${LOG_LINE:l} in
						*"giving up"*)	
						ERROR_CNT=${_ERROR_LIMIT}	
						_FAILED[${M}]=true
						_DOWNLOADS[${M}]=false
						break 2 # Exit scan
						;;
						*unreachable*|*retrying*|*timed\ out*)	
							msg_box -t.2 -x$((COORDS[X]+5)) -y$((COORDS[Y] + COORDS[W] -27)) "<r>Network Errors<N>:<w>${ERROR_CNT}<N>"
							echo "$(get_field author ${M}) - Caught:"${LOG_LINE} >> ${_ERROR_LOG}
						;;
						*) msg_box -t.2 -x$((COORDS[X]+5)) -y$((COORDS[Y] + COORDS[W] -27)) "<r>Network Errors<N>:<w>${ERROR_CNT}<N>"
							echo "$(get_field author ${M}) - Uncaught:"${LOG_LINE} >> ${_ERROR_LOG}
							_DEBUG=${_YTS_DBG}
						;;
					esac
				else
					HAD_ERROR=false
					ERROR_CNT=0
				fi

				# Scan for progress
				if [[ ${HDRS_OUT} == 'true' && ${_DOWNLOADS[${M}]} != 'true' ]];then
					grep -qi 'eta\|100%\|100\.0' <<<${LOG_LINE}
					if [[ ${?} -eq 0 ]];then
						ETA=$(sed 's/^\(.*:[0-9][0-9]\)\(.*\)/\1/' <<<${LOG_LINE})
						if [[ ! ${ETA} =~ '^[ \t]*$' ]];then # Not blank
							case ${ETA:l} in
								*rumbleembed*) continue;;
								*mib/s*) LINE_COLOR='<w>';;
								*kib/s*) LINE_COLOR='<B><y>';;
								*100%*) LINE_COLOR='<B><g>';;
								*) LINE_COLOR='';;
							esac
							[[ ${HAD_ERROR} == 'true' ]] && LINE_COLOR='<r>'

							msg_box -C -jl "${LINE_COLOR}${ETA}<N>" # Show progress

							if [[ ${ETA} =~ '100%' ]];then
								if [[ ${#_MARKED} -gt 1 ]];then
									msg_box -C -jc "<w>$(str_unicode_line 10)<N>"
									if [[ $((${#_MARKED}-DL_CNT)) -gt 0 ]];then
										msg_box -t${PAUSE} -x$(( COORDS[X]+4 )) "Download ${DL_CNT} completed - $((${#_MARKED}-DL_CNT)) remaining"
									fi
								fi
								_DOWNLOADS[${M}]=true
								post_process
								log_download ${M}
								break # Exit log scan
							fi
						else
							echo "LOG_LINE:${LOG_LINE}" >> /tmp/${g_LOG:h}-ETA.dbg
						fi
					fi
				fi
			fi
			sleep 2
		done
		NDX=0
		clear_log "action_do"
	done
	stty echo

	for M in ${_MARKED};do
		if [[ ${_DOWNLOADS[${M}]} == 'true' ]];then
			list_set_selected ${M} ${_GHOST_ROW}
		else
			list_set_selected ${M} ${_AVAIL_ROW}
		fi
	done

	_MARKED=()
	
	trap - INT # Downloads are finished; nothing to interrupt

	return 0
}

action_warn () {
	local M
	
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	msg_box -H1 -p -PG "<w><I>Please respond<N>|<Z>|${#_MARKED} $(str_pluralize ${_OBJECT} ${#_MARKED}) selected"

	if [[ ${_MSG_KEY} == 'n' ]];then
		for M in ${_MARKED};do
			_MARKED[${M}]=0
			list_set_selected ${M} ${_AVAIL_ROW}
		done
	fi
}

clear_log () {
	local FROM=${1}

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	if [[ ${_DEBUG} -eq 0 && -e ${g_LOG} ]];then
		rm -f ${g_LOG}
		echo "log ${g_LOG} was cleared for:${g_FAVORITE} from:${FROM}" >> /tmp/yt.log.dbg # Debug is NOT active - clear the log
	else
		echo "DEBUG active - log ${g_LOG} was retained for:${g_FAVORITE}" >> /tmp/yt.log.dbg # Debug is active - retain the log
	fi
}

delete_favorite () {
	local FAV=${1}
	local ENG=''
	local F1 F2

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	cp ${_YTS_FAVORITES} ${_YTS_FAVORITES}.bak

	[[ ${g_QRY_ENGINE} == 'rumble' ]] && ENG="R" || ENG="Y"

	msg_box -p -PD "Deleting: ${FAV} for ${(C)g_QRY_ENGINE}?"

	if [[ ${_MSG_KEY} == 'y' ]];then
		if [[ -s ${_YTS_FAVORITES} ]];then
			[[ -e /tmp/favlist.new ]] && /bin/rm -f /tmp/favlist.new
			while read LINE;do
				F1=$(cut -d '|' -f1 <<<${LINE})
				F2=$(cut -d '|' -f2 <<<${LINE})
				[[ ${F1} == ${FAV} && ${F2} =~ ${ENG} ]] && continue
				echo ${LINE} >> /tmp/favlist.new
			done < ${_YTS_FAVORITES}
			mv -f /tmp/favlist.new ${_YTS_FAVORITES}
		else
			exit_leave "No favorites have been saved"
		fi
	fi
}

get_favorite () {
	local -a _DISPLAY_LIST=()
	local LINE
	local FAV
	local FAV_TYPE
	local MSG

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	list_set_type select

	while true;do
		if [[ -s ${_YTS_FAVORITES} ]];then
			_DISPLAY_LIST=()
			while read LINE;do
				FAV=$(cut -d'|' -f1 <<<${LINE})
				FAV_TYPE=$(cut -d'|' -f2 <<<${LINE})
				if [[ ${g_QRY_ENGINE} == 'rumble' ]];then
					[[ ${FAV_TYPE:l} =~ 'r' ]] && _DISPLAY_LIST+=${FAV} # Rumble
				else
					[[ ${g_LIST_SUBSET} == 'true' && ${FAV_TYPE:l} =~ 'p' ]] && _DISPLAY_LIST+=${FAV} # YouTube custom
					[[ ${g_LIST_SUBSET} == 'false' && ${FAV_TYPE:l} =~ 'y' && (! ${FAV_TYPE:l} =~ 'p') ]] && _DISPLAY_LIST+=${FAV} # YouTube
				fi
				_FAVORITE_ENGINE[${FAV}]=${FAV_TYPE:s/P//} # Strip custom marker
			done < ${_YTS_FAVORITES}
		else
			exit_leave "No favorites have been saved"
		fi

		sel_list_set ${(o)_DISPLAY_LIST}
		sel_list_set_page_help "(<w>r<N>)umble list, (<w>y<N>)outube list, (<w>c<N>)ustom list, (<w>d<N>)elete favorite"

		clear

		[[ ${g_QRY_ENGINE} == 'rumble' && ${g_LIVE_OPT} == 'true' ]] && MSG=' (<c>livestreams toggled<w>)' || MSG=''

		_SEL_VAL=?
		sel_list "<w>Run ${(C)g_QRY_ENGINE} query${MSG} from history or <h>(q)uit<N>"

		case ${_SEL_KEY} in
			d) delete_favorite ${_SEL_VAL} && _DISPLAY_LIST=() && continue;;
			l) if [[ ${g_QRY_ENGINE} == 'rumble' ]];then
					[[ ${g_LIVE_OPT} == 'true' ]] && g_LIVE_OPT=false || g_LIVE_OPT=true
				else
					msg_box -p -PK "Livestream toggle only applies to Rumble"
					g_LIVE_OPT=true
				fi
				continue
				;;
			r) g_QRY_ENGINE='rumble' && g_LIST_SUBSET=false && continue;;
			y) g_QRY_ENGINE='youtube' && g_LIST_SUBSET=false && continue;;
			c) g_QRY_ENGINE='youtube' && g_LIST_SUBSET=true && continue;;
		esac

		break
	done

	g_FAVORITE=${_SEL_VAL}
}

get_field () {
	local FIELD=${1}
	local NDX=${2}
	local STR

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"
	[[ ${_DEBUG} -ge 2 ]] && dbg "${0}:${LINENO} ARGS:FIELD:${FIELD}, NDX:${NDX}"
	[[ ${_DEBUG} -ge 2 ]] && dbg "${0}:${LINENO} _LIST[NDX]:${_LIST[${NDX}]}"

	if [[ ${g_QRY_ENGINE} == 'rumble' ]];then
		case ${FIELD} in
			author) STR=$(cut -d'|' -f2 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[author]}]}";;
			title) STR=$(cut -d'|' -f3 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[title]}]}";;
			age) STR=$(cut -d'|' -f4 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[age]}]}";;
			url) STR=$(cut -d'|' -f5 <<<${_LIST[${NDX}]});STR="http://rumble.com${STR}";;
			time) STR=$(cut -d'|' -f6 <<<${_LIST[${NDX}]});STR="(${STR})";;
			agetime) STR=$(cut -d'|' -f4,6 <<<${_LIST[${NDX}]});STR="(${STR:s/|/ /})";;
		esac
		[[ -z ${STR} ]] && STR="Unknown"
	else
		case ${FIELD} in
			age) STR=$(cut -d'|' -f1 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[age]}]}";;
			author) STR=$(cut -d'|' -f2 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[author]}]}";;
			title) STR=$(cut -d'|' -f3 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[title]}]}";;
			url) STR=$(cut -d'|' -f4 <<<${_LIST[${NDX}]});;
			time) STR=$(cut -d'|' -f5 <<<${_LIST[${NDX}]});STR="(${STR})";;
			agetime) STR=$(cut -d'|' -f1,5 <<<${_LIST[${NDX}]});STR="(${STR:s/|/ /})";;
		esac
		fi

		[[ ${_DEBUG} -ge 2 ]] && dbg "${0}:${LINENO} Returning STR:${STR}"
		
		STR=$(html2text -ascii <<<${STR})
		STR=$(iconv -f utf-8 -t ascii//translit <<<${STR}) # Scrub non ascii
		echo -n ${STR[1,65]}
}

item_decorate () {
	local NDX=${1}
	local STR

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	if [[ ${_DOWNLOADS[${NDX}]} == 'true' ]];then
		STR="Downloaded..."
	elif [[ ${_FAILED[${NDX}]} == 'true' ]];then
		STR="Failed..."
	elif [[ ${_FUTURE[${NDX}]} == 'true' ]];then
		STR="Future..."
	else
		STR="$(get_field agetime ${NDX})"
	fi

	echo -n ${STR[1,${_FIELD_LEN[agetime]}]}
}

kill_job () {
	local JOB
	local RC

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	JOB=$(ps -h -p ${g_PID})
	RC=$?
	
	if [[ ${RC} -eq 0 ]];then
		kill -9 ${g_PID} >/dev/null 2>&1
	else
		echo "No process found for PID:${g_PID}" >> ${g_LOG}
	fi

	if [[ ! ${functrace[1]} =~ "reset_job" ]];then
		trap - INT # Disable trap
		clear_log "kill_job"
		exit_leave "${_SCRIPT}:${WHITE_FG}Download Job${RESET}:${JOB} ${WHITE_FG}was ${RED_FG}killed${RESET}"
	fi
}

last_update () {
	local MARKER_ARG=${1}
	local LAST_UPD
	local LAST_TIME

	[[ -z ${MARKER_ARG} ]] && exit_leave "${0:t} Missing argument: MARKER"

	if [[ -e ${MARKER_ARG} ]];then
		LAST_UPD=$(stat -c "%y" ${MARKER_ARG} | cut -d' ' -f1)
	else
		touch ${_MARKER}
		exit_leave $(msg_warn "${_SCRIPT}: Last update date is unknown")
	fi

	[[ -e ${MARKER_ARG} ]] && LAST_TIME=$(stat -c"%x" ${MARKER_ARG} | cut -d. -f1 | cut -d' ' -f2 | cut -d: -f1,2) 

	echo "$(date_since_today ${_TODAY} ${LAST_UPD}) at ${LAST_TIME}"
}

log_download () {
	local NDX=${1}
	local ST=$(stat -c"%W|%i|%n" ${_DOWNLOAD_DIR}/* | sort -t'|' -k1 -r | head -1) # Sort by birth date; grab most recent
	local IN=$(cut -d'|' -f2 <<<${ST})
	local FN=$(cut -d'|' -f3 <<<${ST})
	local TL=$(get_field title ${NDX})
	echo "${IN}|${TL}|${FN:t}" >> ${_DOWNLOAD_LOG}
}

log_find () {
	local NDX=${1}
	local FN=$(get_field title ${NDX})

	if [[ -n ${FN} ]];then
		grep -q ${FN} ${_DOWNLOAD_LOG}
		[[ ${?} -eq 0 ]] && _DOWNLOADS[${NDX}]=true
	fi
}

log_update () {
	local FN_HIT=''
	local LINE=''
	local IN=''
	local NEW_LOG=/tmp/log.new
	local L

	[[ -e /tmp/log.new ]] && /bin/rm -f ${NEW_LOG}

	while read LINE;do
		IN=$(cut -d'|' -f1 <<<${LINE})
		FN_HIT=$(find ${_DOWNLOAD_DIR} -maxdepth 1 -inum ${IN})
		[[ -n ${FN_HIT} ]] && grep ${IN} ${_DOWNLOAD_LOG} >> ${NEW_LOG}
	done < ${_DOWNLOAD_LOG}

	[[ -e ${NEW_LOG} ]] && mv -f ${NEW_LOG} ${_DOWNLOAD_LOG}
}

post_process () {
	local -a KEYWORDS=("judge_napolitano_-_" "official" "afshin_rattansi_s_" "the_" "_show")
	local K

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	msg_box -x$(( COORDS[X]+4 )) "Post processing..."

	for K in ${KEYWORDS};do
		fsub -iy ${K} ${_DOWNLOAD_DIR} >/dev/null 2>&1
		[[ ${g_QRY_ENGINE} == 'rumble' ]] && fsub -y -t65 ${_DOWNLOAD_DIR} >/dev/null 2>&1
	done
}

reset_job () {
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	kill_job
	msg_box -t.2 -x$((COORDS[X]+5)) -y$((COORDS[Y] + COORDS[W] -25)) "<m>Job Restarted<N>"
}

rumble () {
	local SEARCHTERM=${1}
	local -a AGES
	local -a CHANNELS
	local -a DURATIONS
	local -a LINKS
	local -a TITLES
	local -aU VID_LIST=()
	local AGE
	local CHANNEL
	local GEN_SEARCH
	local LIVE
	local PG
	local MSG
	local X
	local NDX

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	PG=$(wget -q -O - "http://rumble.com/c/${SEARCHTERM}?page=1")

	if [[ -n ${PG} ]];then # Channel search
		[[ ${_FAVORITE_ENGINE[${SEARCHTERM}]:l} == 'r' ]] && g_LIVE=false
		[[ ${_FAVORITE_ENGINE[${SEARCHTERM}]:l} == 'rl' ]] && g_LIVE=true
		[[ ${g_LIVE_OPT} == 'true' ]] && { [[ ${g_LIVE} == 'true' ]] && g_LIVE=false || g_LIVE=true }
		[[ ${g_LIVE} == 'true' ]] && MSG="Searching for livestreams..." || MSG="Searching for videos..."
		msg_box -R INNER -c ${MSG}
		LIVE=$(pup '.channel-subheader--menu-item attr{href}' <<<${PG} | grep "livestreams")
		[[ ${g_LIVE} == 'true' && -n ${LIVE} ]] && PG=$(wget -q -O - "http://rumble.com${LIVE}")
		[[ ${PG:l} =~ "no videos found" ]] && msg_box -c "<r>No livestreams<N> for ${SEARCHTERM}|Falling back to defaults..." && PG=$(wget -q -O - "http://rumble.com/c/${SEARCHTERM}?page=1")

		g_SEARCH_TYPE=channel
		TITLES=("${(f)$(pup --charset utf8 '.title__link text{}' <<<${PG} | tut blank_lines | iconv -f utf-8 -t ascii//TRANSLIT | sed 's/|//g')}")
		AGES=("${(f)$(pup --charset utf8 '.videostream__data text{}' <<<${PG} | tut blank_lines | tr '[\012|\015]' '[ ]' | sed -e 's/comments /comments\n/g')}")
		LINKS=("${(f)$(pup --charset utf8 'a.videostream__link attr{href}' <<<${PG})}")
		DURATIONS=("${(f)$(pup --charset utf8 '.videostream__badge text{}' <<<${PG} | tut blank_lines)}")

		for ((X=1; X<=${#TITLES}; X++));do
			AGE=$(sed 's/ago .*/ago/' <<<${AGES[${X}]})
			[[ -z ${AGE} ]] && continue
			VID_LIST+="${SEARCHTERM}|${TITLES[${X}]}|${AGE}|${LINKS[${X}]}|${DURATIONS[${X}]}" # Unique rows
		done
	else # General search
		msg_box "Channel name: \"${SEARCHTERM}\" not found.  Performing general search..."
		g_SEARCH_TYPE=general
		GEN_SEARCH=$(sed 's/ /%20/g' <<<${SEARCHTERM})
		PG=$(wget -q -O - "https://rumble.com/search/all?q=${GEN_SEARCH}")
		TITLES=("${(f)$(pup --charset utf8 '.video-item--title text{}' <<<${PG} | iconv -f utf-8 -t ascii//TRANSLIT | sed 's/|//g')}")
		AGES=("${(f)$(pup --charset utf8 '.video-item--meta attr{datetime}' <<<${PG})}")
		DURATIONS=("${(f)$(pup --charset utf8 '.video-item--duration attr{data-value}' <<<${PG})}")
		LINKS=("${(f)$(pup --charset utf8 '.video-item--a attr{href}' <<<${PG})}")
		CHANNELS=("${(f)$(pup --charset utf8 '.video-item--by-a attr{href}' <<<${PG})}")

		for ((X=1; X<=${#TITLES}; X++));do
			[[ ${CHANNELS[${X}]} =~ 'user' ]] && continue # Experimental to avoid dups by users
			AGE=$(sed 's/T.*//' <<<${AGES[${X}]})
			CHANNEL=$(sed 's#^.*/##' <<<${CHANNELS[${X}]})
			CHANNEL="${(C)SEARCHTERM} (${CHANNEL})"
			VID_LIST+="${CHANNEL}|${TITLES[${X}]}|${AGE}|${LINKS[${X}]}|${DURATIONS[${X}]}" # Unique rows
		done
	fi

	NDX=0
	for X in ${VID_LIST};do
		((NDX++))
		VID_LIST[${NDX}]="${NDX}|${X}"
	done

	if [[ ${g_SEARCH_TYPE} == 'general' ]];then
		_LOCAL_LIST=("${(f)$(for L in ${VID_LIST};do echo ${L};done | sort -t'|' -k4.1,4.10 -r)}")
	else
		_LOCAL_LIST=(${VID_LIST})
	fi

	[[ ${_DEBUG} -ge 1 ]] && dbg "${0}:${LINENO} _LOCAL_LIST count: ${#_LOCAL_LIST}, TITLES: ${#TITLES}"
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} \n$( for L in ${TITLES};do printf "TITLE:%s\n" ${L};done )"

	# Return search status
	if ! arr_is_populated "${_LOCAL_LIST}";then
		return 1
	fi

	return 0
}

select_download () {
	local SEARCHTERM=${1:=Unknown}
	local SEARCHTYPE=''
	local L F
	local TITLE
	local FLST
	local STR

	list_set_type classic

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} ${GREEN_FG}LOCAL_LIST COUNT${RESET}:${#_LOCAL_LIST}"

	SEARCHTYPE=Videos
	if [[ ${g_QRY_ENGINE:l} == 'rumble' ]];then
		list_set_sort_cols 1 4 2 2 3 3 # Age, author, title
		[[ ${g_LIVE} == 'true' ]] && SEARCHTYPE=Live
	elif [[ ${g_QRY_ENGINE:l} == 'youtube' ]];then
		list_set_sort_cols '' # Age, author, title
		[[ ${g_STRICT} == 'true' ]] && SEARCHTYPE="Strict (${g_STRICT_MSG})"
	fi

	[[ ${_DEBUG} -ge 2 ]] && dbg "${0}:${LINENO} Sort cols set:${_SORT_COLS}"

 # Set headings
	list_set_header_init
	list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} $(str_pluralize video ${#_LIST})\tPlatform:${WHITE_FG}%s${RESET}\tQuery Key:${WHITE_FG}%s${RESET}\tQuery Type:${WHITE_FG}%s${RESET}\tSelected:${WHITE_FG}%s${RESET}\t${_PG}" ${#_LIST} ${(C)g_QRY_ENGINE} ${(C)SEARCHTERM} ${(C)SEARCHTYPE} $(list_get_selected_count)'
	list_set_header 'printf " "'
	list_set_header 'printf "%*s %-*s %-*s %-*s" 5 "" ${_FIELD_LEN[age]} "Age" ${_FIELD_LEN[author]} "Author" ${_FIELD_LEN[title]} "Title"'
	list_set_header 'printf "%*s ${MAGENTA_FG}%-*s %*s %*s${RESET}" 5 "" ${_FIELD_LEN[age]} "$(str_unicode_line ${_FIELD_LEN[age]})" ${_FIELD_LEN[author]} "$(str_unicode_line ${_FIELD_LEN[author]})" ${_FIELD_LEN[title]} "$(str_unicode_line ${_FIELD_LEN[title]})"'

 # Set line item
	list_set_line_item ' 
	local ITEM_COLOR=$(set_item_color $(item_decorate ${_LIST_NDX}));
	printf "${BOLD}${WHITE_FG}%4s${RESET}) ${SHADE}${BAR}${ITEM_COLOR}%-${_FIELD_LEN[age]}s${RESET}${SHADE}${BAR} %-${_FIELD_LEN[author]}s %-${_FIELD_LEN[title]}s${RESET}\n" ${_LIST_NDX} "$(item_decorate ${_LIST_NDX})"  "$(get_field author ${_LIST_NDX})"  "$(get_field title ${_LIST_NDX})" 
	'

	list_set_prompt "Hit <${GREEN_FG}SPACE${RESET}> to select ${_OBJECT}(s) then <${GREEN_FG}ENTER${RESET}> to ${_ACTION} ${_OBJECT}(s) (${ITALIC}or exit if none selected${RESET})"
	list_set_action_msgs video download
	list_set_sortable true
	list_set_max_sort_col 3
	list_set_sort_col_default 1
	if [[ ${g_SEARCH_TYPE} == 'general' ]];then
		list_set_sort_col_default 0
	fi
	list_set_barlines true
	list_set_page_callback log_find 

	while true;do
	 # Get selection
		list_reset
		list_select ${_LOCAL_LIST}
		[[ ${?} -eq 0 ]] && break

	 # Get selections
		_MARKED=($(list_get_selected))
		
		if [[ $(list_get_selected_count) -ne 0 ]];then
			action_warn
			if [[ ${_MSG_KEY} == "y" ]];then
				action_do
			fi
		fi
	done

	_DOWNLOADS=()
	_FAILED=()
	_FUTURE=()
}

set_favorite () {
	local FAV=${(Q)1}
	local -aU HISTORY
	local LINE
	local H

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"
	[[ ${_DEBUG} -ge 1 ]] && dbg "${0}:${LINENO} ARG: FAV:${FAV} g_QRY_ENGINE:${g_QRY_ENGINE} g_LIVE:${g_LIVE}"

	FAV=$(str_trim ${(C)FAV})
	
	msg_box -H1 -p -PC "<w><I>Please respond<N>|<Z>|Add ${FAV} to favorites?"
	[[ ${_MSG_KEY} != 'y' ]] && return

	# R    - Rumble  - general query
	# RL   - Rumble  - livestream query
	# Y    - YouTube - ID query
	# YNS  - YouTube - ID no strict
	# PYNS - YouTube - general query
	
	if [[ ${g_QRY_ENGINE:l} == 'rumble' ]];then
		[[ ${g_LIVE} == 'true' ]] && FAV="${FAV}|RL" || FAV="${FAV}|R"
	else
		if [[ ${FAV} =~ ' ' ]];then
			FAV="${FAV}|PYNS" # Contains spaces
		else
			[[ ${g_STRICT} == 'false' ]] && FAV="${FAV}|YNS" || FAV="${FAV}|Y"
		fi
	fi

	HISTORY+=${FAV}

	if [[ -e ${_YTS_FAVORITES} ]];then
		while read LINE;do
			HISTORY+=${LINE}
		done < ${_YTS_FAVORITES}

		/bin/rm -f ${_YTS_FAVORITES}
	fi

	for H in ${(o)HISTORY};do
		echo ${H} >> ${_YTS_FAVORITES}
	done

	sort -o ${_YTS_FAVORITES} -t'|' -k2 ${_YTS_FAVORITES} 
}

set_item_color () {
	local ITEM=${1}

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	case ${ITEM:l} in
		downloaded*) echo ${GREEN_FG};;
		failed*) echo ${RED_FG};;
		future*) echo ${CYAN_FG};;
		*) echo '';;
	esac
}

start_job () {
	local URL=${@}

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	g_LOG=$(mktemp /tmp/yt.log.XXXXXX)

	nohup yt -i -o "%(channel)s - %(title)s.%(ext)s" ${URL} >>${g_LOG} 2>&1 &
	g_PID=$!

	echo "g_LOG:${g_LOG} g_PID:${g_PID}" >> ${g_LOG}
}

total_rejects () {
	local TL_VIDS=${1}
	local K
	local TL_RJ=0
	local -F1 RJ_PCT=0

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	for K in ${(k)_REJECTS};do
		[[ ${_REJECTS[${K}]} == 'true' ]] && ((TL_RJ++))
	done

	TL_VIDS=${TL_VIDS}.00
	TL_RJ=${TL_RJ}.00

	[[ ${TL_RJ} -ne 0 ]] && RJ_PCT=$(( (TL_RJ/TL_VIDS) * 100 ))

	echo "${RJ_PCT}%"
}

youtube () { 
	local DATA
	local LINE
	local PROXY_CMD
	local NDX
	local STR

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	[[ ${_FAVORITE_ENGINE[${1}]:l} == 'yns' ]] && g_STRICT=false && g_PROXY_CMD=$(sed 's/\-s//' <<<${g_PROXY_CMD}) # No strict requested
	[[ -n ${g_FAVORITE} ]] && PROXY_CMD="${g_PROXY_CMD} ${g_FAVORITE:q}" || PROXY_CMD="${g_PROXY_CMD}"

	# Command line processing is in the js script - only proxy the script
	[[ ${_DEBUG} -ne 0 ]] && dbg "${0}:${LINENO} PROXY COMMAND: ${WHITE_FG}${PROXY_CMD}${RESET}"

	_LOCAL_LIST=()

	NDX=0
	while read LINE;do
		[[ ${LINE:l} =~ 'matched' ]] && DATA=true && continue
		((NDX++))
		[[ ${LINE:l} =~ 'rejected' ]] && _REJECTS[${NDX}]=true || _REJECTS[${NDX}]=false
		[[ ${LINE:l} =~ 'usage' && ${DATA} != 'true' ]] && DATA=info
		[[ ${LINE:l} =~ 'error' && ${DATA} != 'true' ]] && DATA=info
		STR=$(iconv -f utf-8 -t ascii//translit <<<${LINE}) # Scrub non ascii
		[[ ${STR} =~ '[?][?][?]*' ]] && continue # Skip garbage items
		[[ ${_REJECTS[${NDX}]} == 'false' && ${DATA} == 'true' ]] && _LOCAL_LIST+=${STR:s/Streamed //}
	done< <(eval ${PROXY_CMD})

	[[ ${g_STRICT} == 'true' ]] && g_STRICT_MSG="$(total_rejects ${NDX})" || g_STRICT_MSG=''

	[[ ${_DEBUG} -ge 1 ]] && dbg "${0}:${LINENO} _LOCAL_LIST count: ${#_LOCAL_LIST}"
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} \n$( for L in ${_LOCAL_LIST};do printf "TITLE:%s\n" "$(cut -d'|' -f3 <<<${L})" ;done )"

	[[ ${_SMCUP} == 'false' ]] && do_smcup

	if [[ ${DATA} == 'info' ]];then
		exit_leave
	fi

	# Return search status
	if ! arr_is_populated "${_LOCAL_LIST}";then
		g_PROXY_CMD=$(str_trim ${(Q)g_PROXY_CMD})

		msg_box -H2 -p -PK "<r>No data for query<N>:${g_PROXY_CMD}|${g_STRICT_MSG}|Use option '<w>-S<N>' to disable strict filtering"
		return 1
	fi

	return 0
}

#--Begin GetOpts--
read -r -d '' DESC<<EOF
Query either Youtube or Rumble for videos.
\tyts functions as proxy for yts.js (node yt-search client)
\tor executes and parses Rumble queries.  Queries provide
\ta selection list of matching videos. Following selection, 
\titems are downloaded via yt-dlp. By default, Rumble queries
\tare for livestreams and fall back to general search if no 
\tlivestreams are found. The -L option will override this behavior. 
\tWhen saving favorites, query, platform, and search type are cached.
\tHidden keys: 'l' during menu selection will toggle livestream search.
\t             'r' during download will reset the connection.
EOF

opt_type () {
	local OPT=${1}
	case ${OPT} in
		a) echo "<AGE_FILTER> [all,min,hour,day,week,month,year]";;
		f) echo "<SEARCHTERM>";;
	esac
}

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local O

	for O in {1..${#OPTS}};do
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+="<PARAM>" && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${OPTS} $(opt_type f)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-L${RESET} toggle cached livestream option (${MAGENTA_FG}Rumble only${RESET})"
	echo -e "${WHITE_FG}-R${RESET} Rumble query [default is YouTube]"
	echo -e "${WHITE_FG}-S${RESET} Disable strict filtering (${MAGENTA_FG}YouTube only${RESET})"
	echo -e "${WHITE_FG}-V${RESET} yt-search version (${MAGENTA_FG}YouTube only${RESET})"
	echo -e "${WHITE_FG}-l${RESET} search for livestreams (${MAGENTA_FG}Rumble only${RESET})"
	echo -e "${WHITE_FG}-a${RESET} $(opt_type a) (${MAGENTA_FG}YouTube only${RESET})"
	echo -e "${WHITE_FG}-s${RESET} disable strict filter [author must match query] (${MAGENTA_FG}YouTube only${RESET})"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2
}

OPTSTR=":HDRSVLla:s"
OPTIND=0

HELP_OPT=false
VERSION_OPT=false
g_STRICT=true
g_QRY_ENGINE=youtube
g_LIVE_OPT=false
g_LIVE=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) HELP_OPT=true;;
     D) dbg_set_level;;
     V) VERSION_OPT=true;;
     R) g_QRY_ENGINE=rumble;;
     S) g_STRICT=false;;
     l) g_LIVE=true;;
     a) AGE=${OPTARG};;
     s) g_STRICT=true;;
    \?) exit_leave "${RED_FG}Error${RESET}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}";;
	  :) exit_leave "${RED_FG}Error${RESET}: option -${OPTARG} requires an argument${RESET}";;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
g_LAST_UPD=$(last_update ${_MARKER})
log_update

RAWPATH=$(path_get_raw)
FPATH=$(cut -d'|' -f1 <<<${RAWPATH})
FGLOB=$(cut -d'|' -f2 <<<${RAWPATH})
PATHLBL=$(path_get_label 40)

if [[ (! -f ${_MARKER}) || (-f ${_MARKER} && (! ${g_LAST_UPD:l} =~ 'today')) ]];then
	msg_box "Updating yts-dlp..."
	pushd ${_YTS_GIT}
	git pull
	popd
	touch ${_MARKER}
	msg_box_clear
fi

clear

# Arg handling for yts.js
if [[ ${g_QRY_ENGINE} == 'youtube' ]];then
	ARG="${@}"

   if [[ ${HELP_OPT} == 'true' ]];then
		usage
		echo "\nYouTube backend:${WHITE_ON_GREY}${_JS_SCRIPT}${RESET} help\n"
		eval "node ${_JS_SCRIPT} -h" >&2
		exit_leave
	fi

	RCL=$(path_get_raw_cmdline | sed "s/${_SCRIPT}//")
	RCL=$(sed 's/\-h//' <<<${RCL}) # Front end option only
	RCL=$(sed 's/\-D*//' <<<${RCL}) # Front end option only
	RCL=$(sed 's/\-S//' <<<${RCL}) # Front end option only
	RCL=$(sed 's/\-L//' <<<${RCL}) # Rumble only option
	RCL=$(sed 's/\-l//' <<<${RCL}) # Rumble only option

	[[ ${ARG} =~ ' ' ]] && g_STRICT=false # Multiword arg
	[[ ${g_STRICT} == 'true' ]] && RCL="${RCL} -s"
	
	[[ ${_DEBUG} -ne 0 ]] && RCL=$(sed 's/\-D* //' <<<${RCL}) # Front end option only

	if [[ ${VERSION_OPT} == 'true'  ]];then
		echo -n "yt-search version:${WHITE_FG}"
		node ${_JS_SCRIPT} --version
		echo ${RESET}
		exit_leave
		[[ ${?} -ne 0 ]] && exit_leave "${RED_FG}Invalid argument${RESET} - valid age arguments: ${WHITE_FG}all,min,day,week,month,year${RESET}"
	fi

	if [[ -n ${ARG} ]];then
		RCL="${RCL:Q}" # Remove any quotes
		RCL=$(sed "s/${ARG}//" <<<${RCL}) # Remove arg as passed
		RCL="${RCL} ${ARG:q}" # Quote arg for any multi-word searches
	fi

	g_PROXY_CMD="node ${_JS_SCRIPT} ${RCL}"
fi

# Run Query
if [[ ${#} -eq 0 ]];then # NO args passed
	while true;do
		do_smcup
		get_favorite
		if [[ -n ${g_FAVORITE} ]];then
			msg_box "Requesting videos for <B><I>${g_FAVORITE}<N>..."
			${g_QRY_ENGINE} ${g_FAVORITE}
			if [[ ${?} -eq 0 ]];then
				select_download ${g_FAVORITE}
			fi
		fi
	done
else # Args passed
	ARG="${@}"
	${g_QRY_ENGINE} ${ARG}
	if [[ ${?} -eq 0 ]];then
		set_favorite ${ARG}
		select_download ${ARG}
	fi
fi

clear_log "bottom exit"

exit_leave
