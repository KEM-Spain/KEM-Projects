#!/usr/bin/zsh

# Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"

# Declarations
typeset -A _COORDS=(X 10 Y 33 H 10 W 86)
typeset -A _DOWNLOADS=()
typeset -A _FAILED=()
typeset -A _FAVORITE_ENGINE=()
typeset -A _FAVORITE_OPTS=()
typeset -A _FAV_DECODE=()
typeset -A _FIELD_LEN=()
typeset -A _FUTURE=()
typeset -A _PARTIALS=()
typeset -A _REJECTS=()
typeset -A _SORT_DEFAULT=()
typeset -A _STATUS_MSGS=()
typeset -a _LOCAL_LIST=()

# Constants
_YTS_DIR=~/.yts
_SRC_DIR=/usr/local/src

_ACTION=download
_ALERT=.2
_CMD_LINE_ARGS=false
_CODE_MARKER=${_YTS_DIR}/yts-upd.lastrun
_DOWNLOAD_DIR=~/Downloads/Torrents/Library/web
_DOWNLOAD_LOG=${_YTS_DIR}/yts.downloads
_ERROR_LIMIT=5
_ERROR_LOG=/tmp/yts.err
_FIELD_LEN[age]=30
_FIELD_LEN[agetime]=40
_FIELD_LEN[author]=26
_FIELD_LEN[title]=80
_JS_SCRIPT=/usr/local/etc/yts.js
_OBJECT=video
_PAUSE=2
_SORT_DEFAULT=(youtube 1 rumble 1)
_YTS_DBG=2
_YTS_FAVORITES=${_YTS_DIR}/yts_favorites
_YTS_GIT=${_SRC_DIR}/yt-dlp
_YTS_URL_LOG=/tmp/yts.url.log

# Globals
g_FAVORITE=''
g_LAST_CODE_UPD=?
g_LIST_SUBSET=false
g_LIVE=''
g_LIVE_OPT=''
g_YTS_LOG=''
g_PID=?
g_PROXY_CMD=''
g_QRY_ENGINE=''
g_SEARCH_TYPE=''
g_STRICT=false
g_STRICT_MSG=''

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/DATE.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/SEL_LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Functions
action_do () {
	local -a MSGS
	local AUTHOR=''
	local DEST=''
	local DEST_1=''
	local DEST_2=''
	local DL_CNT=0
	local EMSG=''
	local ERROR_CNT=0
	local ETA=''
	local FRAME_PAD=4
	local HAD_ERROR=false
	local HDR1_TXT=0
	local HDR2_TXT=0
	local HDRS_OUT=false
	local HDR_LEN=0
	local HRZ_CTR=0
	local H_CTR=0
	local JOB_STALL=10
	local KEY=''
	local L M S 
	local LAST_LOG_SIZE=0
	local LINE_COLOR=''
	local LOG_ACTIVE=false
	local LOG_LINE=''
	local LOG_SIZE=0
	local LOG_STALLS=0
	local NDX=0
	local PID=0
	local RESUMED_TAG=''
	local RC1=0
	local RC2=0
	local SCAN_LIMIT=0
	local TITLE=''
	local URL=''

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	msg_box_clear

	for M in ${_MARKED};do
		((DL_CNT++))
		_DOWNLOADS[${DL_CNT}]=false
		_FAILED[${DL_CNT}]=false
		_FUTURE[${DL_CNT}]=false

		AUTHOR=$(get_field author ${M})
		TITLE=$(get_field title ${M})
		URL=$(get_field url ${M})

		echo ${AUTHOR}:${TITLE}:${URL} >> ${_YTS_URL_LOG} # Log the url

		HDRS_OUT=false

		unsetopt localtraps # Initialize CTRL-c trap
		trap kill_job INT
		stty -echo

		start_job ${URL}
		msg_box -x${_COORDS[X]} -y${_COORDS[Y]} -h${_COORDS[H]} -w${_COORDS[W]} "Download requested..."

		# Detect missing log
		if [[ ! -e ${g_YTS_LOG} ]];then
			[[ ${NDX} -gt 10 ]] && exit_leave "${g_YTS_LOG} not detected" # No activity
		fi

		while true;do
			((NDX++))
			
			# Handle job reset
			KEY=''
			read -s -t0.1 -k1 KEY
			if [[ ${KEY} == 'r' ]];then # Process job reset
				reset_job
				start_job ${URL}
				HAD_ERROR=false
				ERROR_CNT=0
			fi

			# Ensure log activity
			LOG_SIZE=$(wc -c < ${g_YTS_LOG})
			if [[ ${LOG_SIZE} -ne ${LAST_LOG_SIZE} ]];then
				LOG_STALLS=0 # Log is growing
			else
				((LOG_STALLS++))
				[[ ${LOG_STALLS} -ge ${JOB_STALL} ]] && msg_box -t${_ALERT} -x$((_COORDS[X]+5)) -y$((_COORDS[Y] + _COORDS[W] -27)) "<r>Job Stalled<N>"
				LAST_LOG_SIZE=${LOG_SIZE}
				sleep 1 # Extra sleep 
				continue
			fi

			# Scan for already downloaded
			LOG_LINE=$(grep -m1 -i "already been" ${g_YTS_LOG} 2>/dev/null)

			if [[ ${?} -eq 0 ]];then
				TITLE=$(get_field title ${M})
				EMSG="<w>${TITLE[1,65]}<N>|<g>Has already been downloaded<N>" 
				msg_box -t${_PAUSE} "${EMSG}"
				_DOWNLOADS[${M}]=true
				break # While loop
			fi

			# Scan for not yet available
			LOG_LINE=$(grep -m1 -i "will begin\|premieres\|upcoming" ${g_YTS_LOG} 2>/dev/null)

			if [[ ${?} -eq 0 ]];then
				TITLE=$(get_field title ${M})
				EMSG="<w>${TITLE[1,65]}<N>|<r>Not yet available<N>|<g>${LOG_LINE}<N>" 
				msg_box -t${_PAUSE} "${EMSG}"
				_FUTURE[${M}]=true
				_DOWNLOADS[${M}]=false
				break # While loop
			fi

			# Scan for resume
			RESUMED_TAG=''
			LOG_LINE=$(grep -m1 -i "resuming download" ${g_YTS_LOG} 2>/dev/null)
			if [[ ${?} -eq 0 ]];then
				RESUMED_TAG=' (<w>resumed<N>)'
			fi

			# Process headers
			LOG_LINE=$(grep -m1 -i "destination" ${g_YTS_LOG} 2>/dev/null)
			if [[ ${?} -eq 0 && ${HDRS_OUT} == 'false' ]];then
				DEST=("${(f)$(sed -e "s#${_DOWNLOAD_DIR}/#${_DOWNLOAD_DIR}|#g" -e 's/ \[.*//g' <<<${LOG_LINE})}")
				DEST_1=$(cut -d'|' -f1 <<<${DEST})
				DEST_1=$(cut -d']' -f2- <<<${DEST_1} | sed -e "s/^[[:space:]]/<c>/" -e "s/:/<N>:<m>/")
				HDR1_TXT=$(cut -d'|' -f2 <<<${DEST})
				HDR1_TXT="<m>Downloading<N>:<m> <c>${HDR1_TXT[1,60]}<N>"
				HDR2_TXT="$(str_trim ${DEST_1})<N> - <w>${DL_CNT} <N>of <w>${#_MARKED}<N>${RESUMED_TAG}"
				HDR_LEN=$(( ${#$(msg_nomarkup ${HDR2_TXT})} ))
				HDR_LEN=$((HDR_LEN + FRAME_PAD))
				HRZ_CTR=$(coord_center $((_MAX_COLS-3)) ${HDR_LEN}) # Horiz center
				[[ ${HDR_LEN} -gt ${_COORDS[W]} ]] && _COORDS[W]=${HDR_LEN} && _COORDS[Y]=${HRZ_CTR} # Adjust frame width/center
				msg_box -c -C -I -H3 -jl -x${_COORDS[X]} -y${_COORDS[Y]} -h${_COORDS[H]} -w${_COORDS[W]} ${HDR1_TXT}
				msg_box -C -jl ${HDR2_TXT}
				msg_box -C -jl "<c>$(str_unicode_line $((_COORDS[W]-4)))<N>" # Divider line
				HDRS_OUT=true
			fi

			if [[ ${_DOWNLOADS[${M}]} != 'true' ]];then
				LOG_LINE=$(sed -e 's//\n/g' -e '/./!d' ${g_YTS_LOG} | tail -1) 
				
				# Scan for progress
				if [[ ${HDRS_OUT} == 'true' ]];then
					grep -q -i 'eta\|100%\|100\.0' <<<${LOG_LINE} 2>/dev/null && RC1=${?} # Scan line

					if [[ ${RC1} -eq 0 ]];then
						ETA=$(sed 's/^\(.*:[0-9][0-9]\)\(.*\)/\1/' <<<${LOG_LINE})
						if [[ ! ${ETA} =~ '^[ \t]*$' ]];then # Not blank
							case ${ETA:l} in
								*rumbleembed*) continue;;
								*mib/s*) LINE_COLOR='<w>';;
								*kib/s*) LINE_COLOR='<B><y>';;
								*100%*) LINE_COLOR='<B><g>';;
								*) LINE_COLOR='';;
							esac
							[[ ${HAD_ERROR} == 'true' ]] && LINE_COLOR='<r>'

							msg_box -C -jl "${LINE_COLOR}${ETA}<N>" # Show progress

							if [[ ${ETA} =~ '100%' ]];then
								if [[ ${#_MARKED} -gt 1 ]];then
									msg_box -C -jc "<m>$(str_unicode_line 10)<N>"
									if [[ $((${#_MARKED}-DL_CNT)) -gt 0 ]];then
										msg_box -t${_PAUSE} -x$(( _COORDS[X]+1 )) "Download ${DL_CNT} completed - $((${#_MARKED}-DL_CNT)) remaining"
									fi
								fi
								_DOWNLOADS[${M}]=true
								post_process
								log_download ${M}
								break # Exit log scan
							fi
						fi # Eta seen

						# Scan for errors
						grep -q -i 'error' <<<${LOG_LINE} 2>/dev/null
						if [[ ${?} -eq 0 ]];then
							((ERROR_CNT++))
							HAD_ERROR=true

							if [[ ${ERROR_CNT} -ge ${_ERROR_LIMIT} ]];then # consecutive errors >= limit
								TITLE=$(get_field title ${M})	
								EMSG="<w>${TITLE[1,65]}<N>|<r>Download failed - Errors:${ERROR_CNT} Network failure<N>|${LOG_LINE}" 
								msg_box -f80 -p -PK "${EMSG}"
								_FAILED[${M}]=true
								_DOWNLOADS[${M}]=false
								break 2 # Exit log scan
							fi

							case ${LOG_LINE:l} in
								*"giving up"*)	
								ERROR_CNT=${_ERROR_LIMIT}	
								_FAILED[${M}]=true
								_DOWNLOADS[${M}]=false
								break 2 # Exit scan
								;;
								*) msg_box -T ALERT -t${_ALERT} -x$((_COORDS[X]+5)) -y$((_COORDS[Y] + _COORDS[W] -27)) "<r>Network Errors<N>:<w>${ERROR_CNT}<N>"
									echo "$(get_field author ${M}) - Error:"${LOG_LINE} >> ${_ERROR_LOG}
								;;
							esac
						else
							HAD_ERROR=false
							ERROR_CNT=0
						fi # Error seen
					fi # Headers out
				fi # Log scan
			fi # Monitor download
			sleep 2 # Log fetch delay
		done # Log scan complete
		NDX=0
		clear_log "action_do"
		sleep 1 # Job request delay
	done # List complete
	stty echo

	for M in ${_MARKED};do
		if [[ ${_DOWNLOADS[${M}]} == 'true' ]];then
			list_set_selected ${M} ${_GHOST_ROW}
		else
			list_set_selected ${M} ${_AVAIL_ROW}
		fi
	done

	_MARKED=()
	
	trap - INT # Downloads are finished; cancel trap

	return 0
}

action_warn () {
	local M
	
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	msg_box -H1 -x${_COORDS[X]} -p -PG "<w><I>Please respond<N>|<Z>|${#_MARKED} $(str_pluralize ${_OBJECT} ${#_MARKED}) selected"

	if [[ ${_MSG_KEY} == 'n' ]];then
		for M in ${_MARKED};do
			_MARKED[${M}]=0
			list_set_selected ${M} ${_AVAIL_ROW}
		done
	fi
}

clear_log () {
	local FROM=${1}

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	if [[ ${_DEBUG} -ge ${_YTS_DBG} && -e ${g_YTS_LOG} ]];then
		rm -f ${g_YTS_LOG}
		echo "log ${g_YTS_LOG} was cleared for:${g_FAVORITE} from:${FROM}" >> /tmp/yt.log.dbg # Debug is NOT active - clear the log
	else
		echo "DEBUG active - log ${g_YTS_LOG} was retained for:${g_FAVORITE}" >> /tmp/yt.log.dbg # Debug is active - retain the log
	fi
}

delete_favorite () {
	local FAV=${1}
	local ENG=''
	local F1 F2

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	cp ${_YTS_FAVORITES} ${_YTS_FAVORITES}.bak

	[[ ${g_QRY_ENGINE} == 'rumble' ]] && ENG="R" || ENG="Y"

	msg_box -p -PD "Deleting: ${FAV} for ${(C)g_QRY_ENGINE}?"

	if [[ ${_MSG_KEY} == 'y' ]];then
		if [[ -s ${_YTS_FAVORITES} ]];then
			[[ -e /tmp/favlist.new ]] && /bin/rm -f /tmp/favlist.new
			while read LINE;do
				F1=$(cut -d '|' -f1 <<<${LINE})
				F2=$(cut -d '|' -f2 <<<${LINE})
				[[ ${F1} == ${FAV} && ${F2} =~ ${ENG} ]] && continue
				echo ${LINE} >> /tmp/favlist.new
			done < ${_YTS_FAVORITES}
			mv -f /tmp/favlist.new ${_YTS_FAVORITES}
		else
			exit_leave "No favorites have been saved"
		fi
	fi
}

fav_decode () {
	local FAV_ARG=${1}
	local DIR=${2:=R}
	local REV_LOOKUP=''
	local FWD_LOOKUP=''

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@} FAV_ARG:${FAV_ARG} DIR:${DIR}"

	if [[ ${#_FAV_DECODE} -eq 0 ]];then
		_FAV_DECODE[Alex_Christoforou]="AlexChristoforou"
		_FAV_DECODE[Bad_Faith]="badfaith"
		_FAV_DECODE[Blan_Colirio]="blancolirio"
		_FAV_DECODE[Breakthrough_News]="breakthroughnews"
		_FAV_DECODE[Chris_Hedges_Report]="thechrishedgesyoutubechannel"
		_FAV_DECODE[Counter_Currents]="countercurrents"
		_FAV_DECODE[Danny_Haiphong]="geopoliticshaiphong"
		_FAV_DECODE[Dialogue_Works]="dialogueworks"
		_FAV_DECODE[Due_Dissidence]="duedissidence"
		_FAV_DECODE[George_Galloway]="GeorgeGallowayOfficial"
		_FAV_DECODE[HIOW_George_Galloway]="haveitoutwithgalloway"
		_FAV_DECODE[Glenn_Greenwald]="GGreenwald"
		_FAV_DECODE[Glenn_Diesen]="glenndiesen"
		_FAV_DECODE[Going_UnderGround]="goingunderground"
		_FAV_DECODE[Jimmy_Dore]="TheJimmyDoreShow"
		_FAV_DECODE[Joe_Rogan]="Powerfuljre"
		_FAV_DECODE[Judging_Freedom]="judgingfreedom"
		_FAV_DECODE[Katie_Halper]="katiehalper"
		_FAV_DECODE[Kim_Iversen]="KimIversen"
		_FAV_DECODE[Mentour_Now]="mentournow!"
		_FAV_DECODE[Mentour_Pilot]="mentourpilot"
		_FAV_DECODE[Missionary_Bush_Pilot]="missionarybushpilot"
		_FAV_DECODE[Neil_Oliver]="c-6293844"
		_FAV_DECODE[Piano_Groove]="pianogroove"
		_FAV_DECODE[Richard_Medhurst]="richardmedhurst"
		_FAV_DECODE[Rick_Beato]="rickbeato"
		_FAV_DECODE[Ron_Paul]="RonPaulLibertyReport"
		_FAV_DECODE[Russell_Brand]="russellbrand"
		_FAV_DECODE[Scheer_Post]="scheerpost"
		_FAV_DECODE[The_Duran]="theduran"
		_FAV_DECODE[The_Grayzone]="thegrayzone"
		_FAV_DECODE[The_New_Atlas]="thenewatlas"
		_FAV_DECODE[Tim_Dillon]="timmdillon"
		_FAV_DECODE[Tucker_Carlson]="tuckercarlson"
	fi

	if [[ ${DIR} == 'R' ]];then
		REV_LOOKUP=${${(k)_FAV_DECODE[(r)${FAV_ARG}]}:gs/_/ /}
		[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@} REV_LOOKUP:${REV_LOOKUP}"
		if [[ -n ${REV_LOOKUP} ]];then
			echo ${REV_LOOKUP} && return 0
		else
			echo ${FAV_ARG} && return 1
		fi
	else
		FWD_LOOKUP=${${_FAV_DECODE[${FAV_ARG:s/ /_/}]}:gs/_/ /}
		[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@} FWD_LOOKUP:${FWD_LOOKUP}"
		if [[ -n ${FWD_LOOKUP} ]];then
			echo ${FWD_LOOKUP} && return 0
		else
			echo ${FAV_ARG} && return 1
		fi
	fi
}

get_favorite () {
	local -a _DISPLAY_LIST=()
	local LINE
	local FAV
	local FAV_TYPE
	local MSG

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	list_set_type select

	while true;do
		if [[ -s ${_YTS_FAVORITES} ]];then
			_DISPLAY_LIST=()
			while read LINE;do
				[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@} _YTS_FAVORITES:${LINE}"
				FAV=$(cut -d'|' -f1 <<<${LINE})
				FAV_TYPE=$(cut -d'|' -f2 <<<${LINE})
				if [[ ${g_QRY_ENGINE} == 'rumble' ]];then
					[[ ${FAV_TYPE:l} =~ 'r' ]] && _DISPLAY_LIST+=$(fav_decode ${FAV}) # Rumble
				else
					[[ ${g_LIST_SUBSET} == 'true' && ${FAV_TYPE:l} =~ 'p' ]] && _DISPLAY_LIST+=$(fav_decode ${FAV}) # YouTube custom
					[[ ${g_LIST_SUBSET} == 'false' && ${FAV_TYPE:l} =~ 'y' && (! ${FAV_TYPE:l} =~ 'p') ]] && _DISPLAY_LIST+=$(fav_decode ${FAV}) # YouTube
				fi
				_FAVORITE_ENGINE[${FAV}]=${FAV_TYPE:s/P//} # Strip custom marker
			done < ${_YTS_FAVORITES}
		else
			exit_leave "No favorites have been saved"
		fi

		sel_list_set ${(o)_DISPLAY_LIST}
		sel_list_set_page_help "(<w>r<N>)umble list, (<w>y<N>)outube list, (<w>c<N>)ustom list, (<w>d<N>)elete favorite"

		clear

		[[ ${g_QRY_ENGINE} == 'rumble' && ${g_LIVE_OPT} == 'true' ]] && MSG=' (<c>livestreams toggled<w>)' || MSG=''

		_SEL_VAL=?
		sel_list "<w>Run ${(C)g_QRY_ENGINE} query${MSG} from history or <h>(q)uit<N>" ${_SEL_X} ${_SEL_Y} ${_SEL_NDX}

		case ${_SEL_KEY} in
			d) delete_favorite ${_SEL_VAL} && _DISPLAY_LIST=() && continue;;
			l) if [[ ${g_QRY_ENGINE} == 'rumble' ]];then
					[[ ${g_LIVE_OPT} == 'true' ]] && g_LIVE_OPT=false || g_LIVE_OPT=true
				else
					g_LIVE_OPT=true  # Livestream toggle only applies to Rumble
				fi
				continue
				;;
			r) g_QRY_ENGINE='rumble' && g_LIST_SUBSET=false && continue;;
			y) g_QRY_ENGINE='youtube' && g_LIST_SUBSET=false && continue;;
			c) g_QRY_ENGINE='youtube' && g_LIST_SUBSET=true && continue;;
		esac

		break
	done

	g_FAVORITE=${_SEL_VAL} # Decoded value from select menu
}

get_field () {
	local FIELD=${1}
	local NDX=${2}
	local STR=''
	local DECODE=''

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"
	[[ ${_DEBUG} -ge 2 ]] && dbg "${0}:${LINENO} ARGS:FIELD:${FIELD}, NDX:${NDX}"
	[[ ${_DEBUG} -ge 2 ]] && dbg "${0}:${LINENO} _LIST[NDX]:${_LIST[${NDX}]}"

	if [[ ${g_QRY_ENGINE} == 'rumble' ]];then
		case ${FIELD} in
			author) STR=$(cut -d'|' -f2 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[author]}]}";STR="$(cut -d'(' -f1 <<<${STR})";;
			title) STR=$(cut -d'|' -f3 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[title]}]}";;
			age) STR=$(cut -d'|' -f4 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[age]}]}";;
			url) STR=$(cut -d'|' -f5 <<<${_LIST[${NDX}]});STR="http://rumble.com${STR}";;
			time) STR=$(cut -d'|' -f6 <<<${_LIST[${NDX}]});STR="(${STR})";;
			agetime) STR=$(cut -d'|' -f4,6 <<<${_LIST[${NDX}]});STR="(${STR:s/|/ /})";;
		esac

		[[ ${FIELD} == 'author' ]] && STR=${$(fav_decode ${g_FAVORITE:gs/ /_/}):gs/_/ /}
	else
		case ${FIELD} in
			age) STR=$(cut -d'|' -f1 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[age]}]}";;
			author) STR=$(cut -d'|' -f2 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[author]}]}";;
			title) STR=$(cut -d'|' -f3 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[title]}]}";;
			url) STR=$(cut -d'|' -f4 <<<${_LIST[${NDX}]});;
			time) STR=$(cut -d'|' -f5 <<<${_LIST[${NDX}]});STR="(${STR})";;
			agetime) STR=$(cut -d'|' -f1,5 <<<${_LIST[${NDX}]});STR="(${STR:s/|/ /})";;
		esac
	fi

	[[ ${FIELD} == 'title' ]] && STR=${STR[1,75]} # Limit length

	[[ ${_DEBUG} -ge 2 ]] && dbg "${0}:${LINENO} Returning STR:${STR}"
	
	STR=$(html2text -ascii <<<${STR})
	STR=$(iconv -f utf-8 -t ascii//translit <<<${STR}) # Scrub non ascii


	[[ ${_DEBUG} -ge 2 ]] && dbg "${0}:${LINENO} Returning:${STR[1,65]}"

	echo -n ${STR}
}

item_decorate () {
	local NDX=${1}
	local STR

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	if [[ ${_DOWNLOADS[${NDX}]} == 'true' ]];then
		STR="Downloaded..."
	elif [[ ${_FAILED[${NDX}]} == 'true' ]];then
		STR="Failed..."
	elif [[ ${_FUTURE[${NDX}]} == 'true' ]];then
		STR="Future..."
	elif [[ ${_PARTIALS[${NDX}]} == 'true' ]];then
		STR="Partial..."
	else
		STR=${$(get_field agetime ${NDX})[1,${_FIELD_LEN[agetime]}]}
	fi

	echo -n ${STR}
}

kill_job () {
	local JOB
	local RC

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	JOB=$(ps -h -p ${g_PID})
	RC=$?
	
	if [[ ${RC} -eq 0 ]];then
		kill -9 ${g_PID} >/dev/null 2>&1
	else
		echo "No process found for PID:${g_PID}" >> ${g_YTS_LOG}
	fi

	if [[ ! ${functrace[1]} =~ "reset_job" ]];then
		trap - INT # Disable trap
		clear_log "kill_job"
		exit_leave "${_SCRIPT}:${WHITE_FG}Download Job${RESET}:${JOB} ${WHITE_FG}was ${RED_FG}killed${RESET}"
	fi
}

last_code_update () {
	local MARKER_ARG=${1}
	local LAST_UPD=0
	local LAST_TIME=0

	[[ -z ${MARKER_ARG} ]] && exit_leave "${0:t} Missing argument: MARKER"

	if [[ -e ${MARKER_ARG} ]];then
		LAST_UPD=$(stat -c "%y" ${MARKER_ARG} | cut -d' ' -f1)
	else
		touch ${MARKER_ARG}
		exit_leave $(msg_exit W "${_SCRIPT}: Last update date is unknown")
	fi

	[[ -e ${MARKER_ARG} ]] && LAST_TIME=$(stat -c"%x" ${MARKER_ARG} | cut -d. -f1 | cut -d' ' -f2 | cut -d: -f1,2) 

	echo "$(date_since_today ${_TODAY} ${LAST_UPD}) at ${LAST_TIME}"
}

log_download () {
	local NDX=${1}
	local ST=$(stat -c"%W|%i|%n" ${_DOWNLOAD_DIR}/* | sort -t'|' -k1 -r | head -1) # Sort by birth date; grab most recent
	local IN=$(cut -d'|' -f2 <<<${ST})
	local FN=$(cut -d'|' -f3 <<<${ST})
	local TL=$(get_field title ${NDX})
	local AT=$(get_field agetime ${NDX})
	echo "${IN}|${TL}|${FN:t}|${AT}" >> ${_DOWNLOAD_LOG}
}

log_find () {
	local NDX=${1}
	local TITLE=$(get_field title ${NDX})
	local AGE=$(get_field agetime ${NDX})
	local LINE=''
	local FN=''

	if [[ -n ${TITLE} ]];then
		LINE=$(grep -i -m1 -e ${TITLE} ${_DOWNLOAD_LOG} 2>/dev/null)
		if [[ -n ${LINE} && ${LINE} =~ ${AGE} ]];then
			FN=$(cut -d '|' -f3 <<<${FN})
			[[ ${FN:e} == 'part' ]] && _PARTIALS[${NDX}]=true || _DOWNLOADS[${NDX}]=true
		fi
	fi
}

download_log_update () {
	local FN_HIT=''
	local LINE=''
	local IN=''
	local NEW_LOG=/tmp/log.new
	local L

	{
		[[ -e /tmp/log.new ]] && /bin/rm -f ${NEW_LOG}

		while read LINE;do
			IN=$(cut -d'|' -f1 <<<${LINE})
			FN_HIT=$(find ${_DOWNLOAD_DIR} -maxdepth 1 -inum ${IN})
			[[ -n ${FN_HIT} ]] && grep ${IN} ${_DOWNLOAD_LOG} 2>/dev/null >> ${NEW_LOG}
		done < ${_DOWNLOAD_LOG}

		[[ -e ${NEW_LOG} ]] && sort -u -o ${NEW_LOG} ${NEW_LOG} && mv -f ${NEW_LOG} ${_DOWNLOAD_LOG}
	} 2>/dev/null
}

post_process () {
	local -a KEYWORDS=("judge_napolitano - " "official" "the " " show")
	local K D
	local FLEN=70

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	msg_box -x$(( _COORDS[X]+4 )) "Post processing..."

	{
		for D in ${_DOWNLOAD_DIR}/*;do
			echo "${0}: ${D}" >>${g_YTS_LOG}
			[[ ${D:e} == 'part' ]] && continue
			[[ ${#D} -gt ${FLEN} ]] && fsub -y -t${FLEN} ${D}
			fsub -y '_s_' '\x27s_' ${D} # Apostrophes
			fsub -y '_' ' ' ${D} # Spaces
			fsub -y '\.\.' '\.' ${D} # Multi dot
			fsub -y ' \.' '\.' ${D} # Dangling file extensions
		done

		for K in ${KEYWORDS};do
			[[ ${K:e} == '.part' ]] && continue
			fsub -iy ${K} ${_DOWNLOAD_DIR}
		done

	} >>${_ERROR_LOG} 2>/dev/null
}

reset_job () {
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	kill_job
	msg_box -t${_ALERT} -x$((_COORDS[X]+5)) -y$((_COORDS[Y] + _COORDS[W] -25)) "<m>Job Restarted<N>"
}

rumble () {
	local SEARCHTERM=${1}
	local -a AGES
	local -a CHANNELS
	local -a DURATIONS
	local -a LINKS
	local -a TITLES
	local -aU VID_LIST=()
	local AGE=''
	local CHANNEL=''
	local GEN_SEARCH=''
	local LIVE=''
	local PG=''
	local MSG=''
	local X=''
	local NDX=''
	local QUERY_KEY=''
	local STR=''
	local DECODE=''
	local -A LAST_MSG=($(box_coords_get MSG_BOX_1))
	local REL_W=$(( ${LAST_MSG[W]} +4 ))
	local REL_Y=$(coord_center $(( _MAX_COLS + 3 )) ${REL_W})

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	QUERY_KEY=$(fav_decode ${SEARCHTERM:gs/ /_/} F) # Convert select menu key

	PG=$(wget -q -O - "http://rumble.com/c/${QUERY_KEY}?page=1")

	if [[ -n ${PG} ]];then # Channel search
		[[ ${_FAVORITE_ENGINE[${QUERY_KEY}]:l} == 'r' ]] && g_LIVE=false
		[[ ${_FAVORITE_ENGINE[${QUERY_KEY}]:l} == 'rl' ]] && g_LIVE=true
		[[ ${g_LIVE_OPT} == 'true' ]] && { [[ ${g_LIVE} == 'true' ]] && g_LIVE=false || g_LIVE=true }
		[[ ${g_LIVE} == 'true' ]] && MSG="Searching livestreams..." || MSG="Searching videos..."

		_REL_COORDS=($(box_coords_relative INNER_BOX X +6 W ${REL_W} Y ${REL_Y} H 3))
		msg_box -T SEARCH -R -c ${MSG}
		LIVE=$(pup '.channel-subheader--menu-item attr{href}' <<<${PG} | grep "livestreams" 2>/dev/null)
		[[ ${g_LIVE} == 'true' && -n ${LIVE} ]] && PG=$(wget -q -O - "http://rumble.com${LIVE}")

		if [[ ${PG:l} =~ "no videos found" ]];then
			_REL_COORDS=($(box_coords_relative INNER_BOX X +6 W ${REL_W} Y ${REL_Y} H 4))
			msg_box -T SEARCH -R -c "<r>Livestream search failed<N> for ${QUERY_KEY}|Falling back to defaults..." 
			PG=$(wget -q -O - "http://rumble.com/c/${QUERY_KEY}?page=1")
		fi

		g_SEARCH_TYPE=channel
		TITLES=("${(f)$(pup --charset utf8 '.title__link text{}' <<<${PG} | tut blank_lines | iconv -f utf-8 -t ascii//TRANSLIT | sed 's/|//g')}")
		AGES=("${(f)$(pup --charset utf8 '.videostream__data text{}' <<<${PG} | tut blank_lines | tr '[\012|\015]' '[ ]' | sed -e 's/comments /comments\n/g')}")
		LINKS=("${(f)$(pup --charset utf8 'a.videostream__link attr{href}' <<<${PG})}")
		DURATIONS=("${(f)$(pup --charset utf8 '.videostream__badge text{}' <<<${PG} | tut blank_lines)}")

		for ((X=1; X<=${#TITLES}; X++));do
			AGE=$(sed 's/ago .*/ago/' <<<${AGES[${X}]})
			[[ -z ${AGE} ]] && continue
			[[ ${QUERY_KEY:l} == ${TITLES[${X}]:l} ]] && continue # Experimental to avoid garbage
			VID_LIST+="${QUERY_KEY}|${TITLES[${X}]}|${AGE}|${LINKS[${X}]}|${DURATIONS[${X}]}" # Unique rows
		done
	else # General search
		msg_box "Channel search failed.  Performing general search..."
		g_SEARCH_TYPE=general
		GEN_SEARCH=$(sed 's/ /%20/g' <<<${QUERY_KEY})
		PG=$(wget -q -O - "https://rumble.com/search/all?q=${GEN_SEARCH}")

		TITLES=("${(f)$(pup --charset utf8 '.video-item--title text{}' <<<${PG} | iconv -f utf-8 -t ascii//TRANSLIT | sed 's/|//g')}")
		AGES=("${(f)$(pup --charset utf8 '.video-item--meta attr{datetime}' <<<${PG})}")
		DURATIONS=("${(f)$(pup --charset utf8 '.video-item--duration attr{data-value}' <<<${PG})}")
		LINKS=("${(f)$(pup --charset utf8 '.video-item--a attr{href}' <<<${PG})}")
		CHANNELS=("${(f)$(pup --charset utf8 '.video-item--by-a attr{href}' <<<${PG})}")

		for ((X=1; X<=${#TITLES}; X++));do
			[[ ${CHANNELS[${X}]} =~ 'user' ]] && continue # Experimental to avoid duplicates
			AGE=$(sed 's/T.*//' <<<${AGES[${X}]})
			CHANNEL=$(sed 's#^.*/##' <<<${CHANNELS[${X}]})
			CHANNEL="${(C)QUERY_KEY} (${CHANNEL})"
			VID_LIST+="${CHANNEL}|${TITLES[${X}]}|${AGE}|${LINKS[${X}]}|${DURATIONS[${X}]}" # Unique rows
		done
	fi
	 
	NDX=0
	for X in ${VID_LIST};do
		((NDX++))
		VID_LIST[${NDX}]="${NDX}|${X}"
	done

	if [[ ${g_SEARCH_TYPE} == 'general' ]];then
		_LOCAL_LIST=("${(f)$(for L in ${VID_LIST};do echo ${L};done | sort -t'|' -k4.1,4.10 -r)}")
	else
		_LOCAL_LIST=(${VID_LIST})
	fi

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} QUERY_KEY:${QUERY_KEY} _LOCAL_LIST count: ${#_LOCAL_LIST}, TITLES: ${#TITLES}"
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} \n$( for L in ${TITLES};do printf "TITLE:%s\n" ${L};done )"
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} \n$( for L in ${CHANNELS};do printf "CHANNEL:%s\n" ${L};done )"

	# Return search status
	if ! arr_is_populated "${_LOCAL_LIST}";then
		return 1
	fi

	return 0
}

select_download () {
	local SEARCHTERM=${1}
	local SEARCHTYPE=''
	local L F
	local TITLE
	local FLST
	local STR

	list_set_type classic

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} ${GREEN_FG}LOCAL_LIST COUNT${RESET}:${#_LOCAL_LIST}"

	SEARCHTYPE=Videos
	if [[ ${g_QRY_ENGINE:l} == 'rumble' ]];then
		list_set_sort_cols 1 4 2 2 3 3 # Age, author, title
		[[ ${g_LIVE} == 'true' ]] && SEARCHTYPE=Live
	elif [[ ${g_QRY_ENGINE:l} == 'youtube' ]];then
		list_set_sort_cols '' # Age, author, title
		[[ ${g_STRICT} == 'true' ]] && SEARCHTYPE="Strict (${g_STRICT_MSG})"
	fi

 # Set headings
	list_set_header_init
	list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} $(str_pluralize video ${#_LIST})\tPlatform:${WHITE_FG}%s${RESET}\tQuery Key:${WHITE_FG}%s${RESET}\tQuery Type:${WHITE_FG}%s${RESET}\tSelected:${WHITE_FG}%s${RESET}\t${_PG}" ${#_LIST} ${(C)g_QRY_ENGINE} ${(C)SEARCHTERM} ${(C)SEARCHTYPE} $(list_get_selected_count)'
	list_set_header 'printf " "'
	list_set_header 'printf "%*s %-*s %-*s %-*s" 5 "" ${_FIELD_LEN[age]} "Age" ${_FIELD_LEN[author]} "Author" ${_FIELD_LEN[title]} "Title"'
	list_set_header 'printf "%*s ${MAGENTA_FG}%-*s %*s %*s${RESET}" 5 "" ${_FIELD_LEN[age]} "$(str_unicode_line ${_FIELD_LEN[age]})" ${_FIELD_LEN[author]} "$(str_unicode_line ${_FIELD_LEN[author]})" ${_FIELD_LEN[title]} "$(str_unicode_line ${_FIELD_LEN[title]})"'

 # Set line item
	list_set_line_item ' 
	local ITEM_COLOR=$(set_item_color $(item_decorate ${_LIST_NDX}));
	printf "${BOLD}${WHITE_FG}%4s${RESET}) ${SHADE}${BAR}${ITEM_COLOR}%-${_FIELD_LEN[age]}s${RESET}${SHADE}${BAR} %-${_FIELD_LEN[author]}s %-${_FIELD_LEN[title]}s${RESET}\n" ${_LIST_NDX} "$(item_decorate ${_LIST_NDX})"  "$(get_field author ${_LIST_NDX})"  "$(get_field title ${_LIST_NDX})" 
	'

	list_set_prompt "Hit <${GREEN_FG}SPACE${RESET}> to select ${_OBJECT}(s) then <${GREEN_FG}ENTER${RESET}> to ${_ACTION} ${_OBJECT}(s) or ${ITALIC}${BOLD}exit${RESET} if none selected"
	list_set_action_msgs video download
	list_set_sortable true
	list_set_max_sort_col 3
	list_set_sort_col_default ${_SORT_DEFAULT[${g_QRY_ENGINE}]}
	list_set_barlines true
	list_set_page_callback log_find 

	while true;do
	 # Get selection
		list_reset
		list_select ${_LOCAL_LIST}
		[[ ${?} -eq 0 ]] && break

	 # Get selections
		_MARKED=($(list_get_selected))
		
		if [[ $(list_get_selected_count) -ne 0 ]];then
			action_warn
			if [[ ${_MSG_KEY} == "y" ]];then
				action_do
			fi
		fi
	done

	_DOWNLOADS=()
	_FAILED=()
	_FUTURE=()
}

set_favorite () {
	local FAV=$(str_trim ${(Q)1})
	local -aU HISTORY
	local LINE
	local H

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"
	[[ ${_DEBUG} -ge 1 ]] && dbg "${0}:${LINENO} ARG: FAV:${FAV} g_QRY_ENGINE:${g_QRY_ENGINE} g_LIVE:${g_LIVE}"

	msg_box -H1 -p -PC "<w><I>Please respond<N>|<Z>|Add ${FAV} to favorites?"
	[[ ${_MSG_KEY} != 'y' ]] && return

	# R    - Rumble  - general query
	# RL   - Rumble  - livestream query
	# Y    - YouTube - ID query
	# YNS  - YouTube - ID no strict
	# PYNS - YouTube - general query
	
	if [[ ${g_QRY_ENGINE:l} == 'rumble' ]];then
		[[ ${g_LIVE} == 'true' ]] && FAV="${FAV}|RL" || FAV="${FAV}|R"
	else
		if [[ ${FAV} =~ ' ' ]];then
			FAV="${FAV}|PYNS" # Contains spaces
		else
			[[ ${g_STRICT} == 'false' ]] && FAV="${FAV}|YNS" || FAV="${FAV}|Y"
		fi
	fi

	HISTORY+=${FAV}

	if [[ -e ${_YTS_FAVORITES} ]];then
		while read LINE;do
			HISTORY+=${LINE}
		done < ${_YTS_FAVORITES}

		/bin/rm -f ${_YTS_FAVORITES}
	fi

	for H in ${(o)HISTORY};do
		echo ${H} >> ${_YTS_FAVORITES}
	done

	sort -o ${_YTS_FAVORITES} -t'|' -k2 ${_YTS_FAVORITES} 
}

set_item_color () {
	local ITEM=${1}

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	case ${ITEM:l} in
		downloaded*) echo ${GREEN_FG};;
		failed*) echo ${RED_FG};;
		future*) echo ${CYAN_FG};;
		partial*) echo ${WHITE_ON_GREY};;
		*) echo '';;
	esac
}

start_job () {
	local URL=${@}

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	g_YTS_LOG=$(mktemp /tmp/yt.log.XXXXXX)

	nohup yt -Rinfinite -i -o "%(channel)s - %(title)s.%(ext)s" ${URL} >>${g_YTS_LOG} 2>&1 &
	g_PID=$!

	echo "g_YTS_LOG:${g_YTS_LOG} g_PID:${g_PID}" >> ${g_YTS_LOG}
}

total_rejects () {
	local TL_VIDS=${1}
	local K
	local TL_RJ=0
	local -F1 RJ_PCT=0

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@}"

	for K in ${(k)_REJECTS};do
		[[ ${_REJECTS[${K}]} == 'true' ]] && ((TL_RJ++))
	done

	TL_VIDS=${TL_VIDS}.00
	TL_RJ=${TL_RJ}.00

	[[ ${TL_RJ} -ne 0 ]] && RJ_PCT=$(( (TL_RJ/TL_VIDS) * 100 ))

	echo "${RJ_PCT}%"
}

youtube () { 
	local -a SORT_LIST
	local AUTHOR=''
	local CUSTOM_KEY=false
	local DATA=false
	local HIT=false
	local LINE=''
	local NDX=0
	local PROXY_CMD=''
	local QUERY_KEY=''
	local STR=''
	local TITLE=''
	local L

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${functrace[1]} called ${0}:${LINENO}: ARGC:${#@} ARGV:${@}"

	QUERY_KEY=$(fav_decode ${g_FAVORITE:gs/ /_/} F) # Convert key from select menu
	if [[ ${?} -ne 0 ]];then # Decode failed
		[[ -n ${_FAVORITE_ENGINE[${g_FAVORITE}]} ]] && QUERY_KEY=${g_FAVORITE} && CUSTOM_KEY=true # Lookup key w/o decode
	fi

	if [[ -n ${QUERY_KEY} ]];then
		[[ ${_FAVORITE_ENGINE[${QUERY_KEY}]:l} == 'yns' ]] && g_PROXY_CMD=${g_PROXY_CMD:s/-s//} && g_STRICT=false # No strict requested
		PROXY_CMD="${g_PROXY_CMD} ${QUERY_KEY:q}"
	else
		PROXY_CMD="${g_PROXY_CMD}"
	fi

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} ${WHITE_FG}QUERY_KEY${RESET}:${QUERY_KEY}"
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} ${WHITE_FG}STRICT${RESET}:${g_STRICT}"
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} ${WHITE_FG}PROXY COMMAND${RESET}:${PROXY_CMD}"

	_LOCAL_LIST=()

	NDX=0
	while read LINE;do
		[[ ${LINE:l} =~ 'matched' ]] && DATA=true && continue

		[[ ${LINE:l} =~ 'usage' && ${DATA} != 'true' ]] && exit_leave
		[[ ${LINE:l} =~ 'error' && ${DATA} != 'true' ]] && exit_leave $(msg_exit E "${PROXY_CMD} returned an error")

		((NDX++))
		[[ ${LINE:l} =~ 'rejected' ]] && _REJECTS[${NDX}]=true || _REJECTS[${NDX}]=false

		STR=$(iconv -f utf-8 -t ascii//translit <<<${LINE}) # Scrub non ascii
		STR=${STR:s/Streamed //}

		# --- BEGIN Experimental filtering
		if [[ ${CUSTOM_KEY} == 'false' ]];then
			HIT=false
			AUTHOR=$(cut -d'|' -f2 <<<${LINE})
			[[ ${AUTHOR:l} =~ ${g_FAVORITE:l} ]] && HIT=true
			[[ ${AUTHOR:l} =~ ${QUERY_KEY:l} ]] && HIT=true
			[[ ${AUTHOR:gs/ //:l} =~ ${QUERY_KEY:l} ]] && HIT=true
			[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} EXPERIMENTAL FILTERING AUTHOR:${AUTHOR} HIT:${HIT}"
			[[ ${HIT} == 'false' ]] && continue
			# --- END Experimental filtering
		fi
		 
		[[ ${_REJECTS[${NDX}]} == 'false' && ${DATA} == 'true' ]] && _LOCAL_LIST+=${STR}
	done< <(eval ${PROXY_CMD})

	[[ ${g_STRICT} == 'true' ]] && g_STRICT_MSG="$(total_rejects ${NDX})" || g_STRICT_MSG=''

	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} _LOCAL_LIST count: ${#_LOCAL_LIST}"
	[[ ${_DEBUG} -ge ${_YTS_DBG} ]] && dbg "${0}:${LINENO} _LOCAL_LIST content:\n $(for L in ${_LOCAL_LIST};do echo ${L};done)"

	[[ ${_SMCUP} == 'false' ]] && do_smcup

	# Return search status
	if ! arr_is_populated "${_LOCAL_LIST}";then
		g_PROXY_CMD=$(str_trim ${(Q)g_PROXY_CMD})

		msg_box -H2 -p -PK "<r>No data for query<N>:${g_PROXY_CMD}|${g_STRICT_MSG}|Use option '<w>-S<N>' to disable strict filtering"
		return 1
	fi

	return 0
}

#--Begin GetOpts--
read -r -d '' DESC<<EOF
Query either Youtube or Rumble for videos.
\tyts functions as proxy for yts.js (node yt-search client)
\tor executes and parses Rumble queries.  Queries provide
\ta selection list of matching videos. Following selection, 
\titems are downloaded via yt-dlp. By default, Rumble queries
\tare for livestreams and fall back to general search if no 
\tlivestreams are found. The -L option will override this behavior. 
\tWhen saving favorites, query, platform, and search type are cached.
\tHidden keys: 'l' during menu selection will toggle livestream search.
\t             'r' during download will reset the connection.
EOF

opt_type () {
	local OPT=${1}
	case ${OPT} in
		a) echo "<AGE_FILTER> [all,min,hour,day,week,month,year]";;
		f) echo "<SEARCHTERM>";;
	esac
}

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local O

	for O in {1..${#OPTS}};do
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+="<PARAM>" && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${OPTS} $(opt_type f)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-L${RESET} toggle cached livestream option (${MAGENTA_FG}Rumble only${RESET})"
	echo -e "${WHITE_FG}-R${RESET} Rumble query [default is YouTube]"
	echo -e "${WHITE_FG}-S${RESET} Disable strict filtering (${MAGENTA_FG}YouTube only${RESET})"
	echo -e "${WHITE_FG}-V${RESET} yt-search version (${MAGENTA_FG}YouTube only${RESET})"
	echo -e "${WHITE_FG}-l${RESET} search for livestreams (${MAGENTA_FG}Rumble only${RESET})"
	echo -e "${WHITE_FG}-a${RESET} $(opt_type a) (${MAGENTA_FG}YouTube only${RESET})"
	echo -e "${WHITE_FG}-s${RESET} enable strict filter [author must match query] (${MAGENTA_FG}YouTube only${RESET})"
	echo -e "${WHITE_FG}-u${RESET} export the video URL"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2
}

OPTSTR=":HDRSVLla:s"
OPTIND=0

HELP_OPT=false
VERSION_OPT=false
g_STRICT=true
g_QRY_ENGINE=youtube
g_LIVE_OPT=false
g_LIVE=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) HELP_OPT=true;;
     D) dbg_set_level;;
     V) VERSION_OPT=true;;
     R) g_QRY_ENGINE=rumble;;
     S) g_STRICT=false;;
     a) AGE=${OPTARG};;
     l) g_LIVE=true;;
     s) g_STRICT=true;;
    \?) exit_leave "${RED_FG}Error${RESET}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}";;
	  :) exit_leave "${RED_FG}Error${RESET}: option -${OPTARG} requires an argument${RESET}";;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
g_LAST_CODE_UPD=$(last_code_update ${_CODE_MARKER})

download_log_update

RAWPATH=$(path_get_raw)
FPATH=$(cut -d'|' -f1 <<<${RAWPATH})
FGLOB=$(cut -d'|' -f2 <<<${RAWPATH})
PATHLBL=$(path_get_label 40)

if [[ (! -f ${_CODE_MARKER}) || (-f ${_CODE_MARKER} && (! ${g_LAST_CODE_UPD:l} =~ 'today')) ]];then
	clear
	msg_box -t1 "Updating yts-dlp..."
	pushd ${_YTS_GIT}
	git pull
	popd
	touch ${_CODE_MARKER}
fi

clear

# Arg handling for yts.js
if [[ ${g_QRY_ENGINE} == 'youtube' ]];then
	ARG="${@}"

   if [[ ${HELP_OPT} == 'true' ]];then
		usage
		echo "\nYouTube backend:${WHITE_ON_GREY}${_JS_SCRIPT}${RESET} help\n"
		eval "node ${_JS_SCRIPT} -h" >&2
		exit_leave
	fi

	RCL=$(path_get_raw_cmdline | sed "s/${_SCRIPT}//")
	RCL=$(sed 's/\-h//' <<<${RCL}) # Front end option only
	RCL=$(sed 's/\-D*//' <<<${RCL}) # Front end option only
	RCL=$(sed 's/\-S//' <<<${RCL}) # Front end option only
	RCL=$(sed 's/\-L//' <<<${RCL}) # Rumble only option
	RCL=$(sed 's/\-l//' <<<${RCL}) # Rumble only option

	[[ ${ARG} =~ ' ' ]] && g_STRICT=false # Multiword arg
	[[ ${g_STRICT} == 'true' ]] && RCL="${RCL} -s"
	
	[[ ${_DEBUG} -ne 0 ]] && RCL=$(sed 's/\-D* //' <<<${RCL}) # Front end option only

	if [[ ${VERSION_OPT} == 'true'  ]];then
		echo -n "yt-search version:${WHITE_FG}"
		node ${_JS_SCRIPT} --version
		echo ${RESET}
		exit_leave
		[[ ${?} -ne 0 ]] && exit_leave "${RED_FG}Invalid argument${RESET} - valid age arguments: ${WHITE_FG}all,min,day,week,month,year${RESET}"
	fi

	if [[ -n ${ARG} ]];then
		RCL="${RCL:Q}" # Remove any quotes
		RCL=$(sed "s/${ARG}//" <<<${RCL}) # Remove arg as passed
		RCL="${RCL} ${ARG:q}" # Quote arg for any multi-word searches
	fi

	g_PROXY_CMD="node ${_JS_SCRIPT} ${RCL}"
fi

# Run Query
if [[ ${#} -eq 0 ]];then # NO args passed
	while true;do
		do_smcup
		get_favorite
		if [[ -n ${g_FAVORITE} ]];then
			msg_box "Requesting videos for <B><I>${g_FAVORITE}<N>..."
			${g_QRY_ENGINE} ${g_FAVORITE}
			if [[ ${?} -eq 0 ]];then
				select_download ${g_FAVORITE}
			fi
		fi
	done
else # Args passed
	_CMD_LINE_ARGS=true
	ARG="${@}"
	${g_QRY_ENGINE} ${ARG}
	if [[ ${?} -eq 0 ]];then
		set_favorite ${ARG}
		select_download ${ARG}
	fi
fi

clear_log "bottom exit"

exit_leave
