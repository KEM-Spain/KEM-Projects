#!/usr/bin/zsh

#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"
#Declarations
typeset -a _LOCAL_LIST
typeset -A _FAVORITE_ENGINE
typeset -A _DOWNLOADS
typeset -A _FAILED
typeset -A _FUTURE
typeset -A _FIELD_LEN
typeset -A _STATUS_MSGS
typeset -A _REJECTS
typeset -A COORDS=(X 15 Y 38 H 10 W 86)

#Constants
#_JS_SCRIPT=./yts.js
_ACTION=download
_DOWNLOAD_DIR=~/Downloads
_ERROR_LIMIT=15
_FIELD_LEN[age]=30
_FIELD_LEN[agetime]=40
_FIELD_LEN[author]=26
_FIELD_LEN[title]=90
_JS_SCRIPT=/usr/local/etc/yts.js
_OBJECT=video
_YTS_FAVORITES=~/.yts_history

#Globals
g_FAVORITE=''
g_LIVE=''
g_LOG=''
g_PID=?
g_PROXY_CMD=''
g_QRY_ENGINE=''
g_SEARCH_TYPE=''
g_STRICT=false
g_STRICT_MSG=''

#Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/SEL_LIST.zsh

for D in ${=_DEPS_};do
	if [[ -e ${_LIB_DIR}/${D} ]];then
		source ${_LIB_DIR}/${D}
	else
		echo "Cannot source:${_LIB_DIR}/${D} - not found"
		exit 1
	fi
done

#Functions
action_do () {
	local -a ETAS
	local -a LOG_LINES
	local -a MSGS
	local DEST
	local DEST_1
	local DEST_2
	local DL_CNT=0
	local EMSG
	local ERROR_CNT=0
	local ETA
	local HDRS_OUT=false
	local HAD_ERROR=false
	local JOB_STALL=20
	local L M S 
	local LINE_COLOR='<w>'
	local LOG_ACTIVE=false
	local LOG_LINE=''
	local LOG_SIZE=0
	local LOG_SIZE_COUNT=0
	local LAST_LOG_SIZE=0
	local NDX=0
	local PAUSE=2
	local RESUMED_TAG=''
	local SCAN_LIMIT=0
	local SCAN_MAX=10
	local STALLS=0
	local TITLE
	local URL
	local KEY=''

	msg_box_clear

	for M in ${_MARKED};do
		((DL_CNT++))
		_DOWNLOADS[${DL_CNT}]=false
		_FAILED[${DL_CNT}]=false
		_FUTURE[${DL_CNT}]=false
		URL=$(get_field url ${M})
		HDRS_OUT=false

		start_job ${URL}
		msg_box -x${COORDS[X]} -y${COORDS[Y]} -h${COORDS[H]} -w${COORDS[W]} "Download requested..."

		# Detect missing log
		if [[ ! -e ${g_LOG} ]];then
			[[ ${NDX} -gt 10 ]] && exit_leave "${g_LOG} not detected" # no activity
		fi

		unsetopt localtraps
		trap kill_job INT

		stty -echo
		while true;do
			((NDX++))
			
			# Process job reset
			KEY=''
			read -s -t0.1 -k1 KEY
			if [[ ${KEY} == 'r' ]];then
				reset_job
				start_job ${URL}
			fi

			# Scan for resume
			LOG_LINE=$(grep -m1 -i "resuming download" ${g_LOG})
			[[ ${?} -eq 0 ]] && RESUMED_TAG='(<w>resumed<N>)' || RESUMED_TAG=''

			# Get headers
			LOG_LINE=$(grep -m1 -i "destination" ${g_LOG})
			if [[ ${?} -eq 0 && ${HDRS_OUT} == 'false' ]];then
				DEST=("${(f)$(sed -e 's#Downloads/#Downloads|#g' -e 's/ \[.*//g' <<<${LOG_LINE})}")
				DEST_1=$(cut -d'|' -f1 <<<${DEST})
				DEST_2=$(cut -d'|' -f2 <<<${DEST})
				msg_box -C -R -H3 -jl -x${COORDS[X]} -y${COORDS[Y]} -h${COORDS[H]} -w${COORDS[W]} "<c>${DEST_1} <N>- <w>${DL_CNT} <N>of <w>${#_MARKED}<N> ${RESUMED_TAG}"
				msg_box -C -jl "<m>Downloading: <c>${DEST_2[1,60]}<N>"
				msg_box -C -jl "<m>$(str_unicode_line $((COORDS[W]-4)))<N>"
				HDRS_OUT=true
			fi

			# Scan for already downloaded
			LOG_LINE=$(grep -m1 -i "already been" ${g_LOG})
			if [[ ${?} -eq 0 ]];then
				TITLE=$(get_field title ${M})
				EMSG="<w>${TITLE[1,65]}<N>|<g>Has already been downloaded<N>" 
				msg_box -t3 "${EMSG}"
				_DOWNLOADS[${M}]=true
				break # while loop
			fi

			# Scan for not yet available
			LOG_LINE=$(grep -m1 -i "will begin\|premieres\|upcoming" ${g_LOG})
			if [[ ${?} -eq 0 ]];then
				TITLE=$(get_field title ${M})
				EMSG="<w>${TITLE[1,65]}<N>|<r>Not yet available<N>|<g>${LOG_LINE}<N>" 
				msg_box -t3 "${EMSG}"
				_FUTURE[${M}]=true
				_DOWNLOADS[${M}]=false
				break # while loop
			fi

			# Scan for errors
			LOG_LINES=("${(f)$(sed -e 's// /g' -e '/./!d' ${g_LOG} | tail -1 | grep -i 'error:\|transporterror')}")
			if [[ ${?} -eq 0 ]];then
				for L in ${LOG_LINES};do
					if [[ ${ERROR_CNT} -ge ${_ERROR_LIMIT} ]];then # 10 consecutive:
						TITLE=$(get_field title ${M})	
						EMSG="<w>${TITLE[1,65]}<N>|<r>Download failed - Network failure<N>" 
						msg_box -p -PK "${EMSG}"
						_FAILED[${M}]=true
						_DOWNLOADS[${M}]=false
						ERROR_CNT=0 # reset
						break 2
					fi
					case ${L:l} in
						*giving\ up*)	ERROR_CNT=${_ERROR_LIMIT}	
											break # for loop
											;;
						*network\ is\ unreachable*|*retrying*|*operation\ timed\ out*)	msg_box -t.2 -x$((COORDS[X]+5)) -y$((COORDS[Y] + COORDS[W] -25)) "<r>Network Errors <w>${ERROR_CNT}<N>"
							((ERROR_CNT++))
							HAD_ERROR=true
											;;
						*) msg_box -t.2 -x$((COORDS[X]+5)) -y$((COORDS[Y] + COORDS[W] -25)) "<r>Network Errors <w>${ERROR_CNT}<N>"
							((ERROR_CNT++))
							HAD_ERROR=true
											;;
					esac
				done
			fi

			# Scan for progress
			if [[ ${HDRS_OUT} == 'true' ]];then
				LOG_LINE=$(tail -1 ${g_LOG})
				case ${LOG_LINE:l} in
					*eta*)	ETAS+=("${(f)$(sed 's//\n/g' <<<${LOG_LINE} | grep -vi 'unknown')}")
								ETA=$(sed 's/^\(.*:[0-9][0-9]\)\(.*\)/\1/' <<<${ETAS[-1]})
								[[ ${ETA} =~ 'MiB' ]] && LINE_COLOR='<w>'
								[[ ${ETA} =~ 'KiB' ]] && LINE_COLOR='<B><y>'
								[[ ${HAD_ERROR} == 'true' ]] && LINE_COLOR='<r>' && HAD_ERROR=false && ERROR_CNT=0
								msg_box -C -jl "${LINE_COLOR}${ETA}<N>"
								if [[ ${ETA} =~ '100%' ]];then
									if [[ ${#_MARKED} -gt 1 ]];then
										msg_box -C -jc "<g><b>$(str_unicode_line 10)<N>"
										if [[ $((${#_MARKED}-DL_CNT)) -gt 0 ]];then
											msg_box -t${PAUSE} -x$(( COORDS[X]+4 )) "Download ${DL_CNT} completed - $((${#_MARKED}-DL_CNT)) remaining"
										fi
									fi
									_DOWNLOADS[${M}]=true
									break # while loop
								fi
								;;
				esac
			fi

			LOG_SIZE=$(wc -c < ${g_LOG})
			[[ ${LOG_SIZE} -ne ${LAST_LOG_SIZE} ]] && LOG_SIZE_COUNT=0 || ((LOG_SIZE_COUNT++))
			[[ ${LOG_SIZE_COUNT} -ge ${JOB_STALL} ]] && msg_box -t1 "Log is frozen" # && exit_leave "Job stalled"
			#msg_box -x1 -y1 "LOG_SIZE:${LOG_SIZE} LAST_LOG_SIZE:${LAST_LOG_SIZE} LOG_SIZE_COUNT:${LOG_SIZE_COUNT}"
			LAST_LOG_SIZE=${LOG_SIZE}

			sleep .1
		done
		NDX=0
	done
	stty echo

	for M in ${_MARKED};do
		if [[ ${_DOWNLOADS[${M}]} == 'true' ]];then
			list_set_selected ${M} ${_GHOST_ROW}
			post_process
		else
			list_set_selected ${M} ${_AVAIL_ROW}
		fi
	done

	_MARKED=()
	
	trap - INT #Downloads are finished; nothing to interrupt

	return 0
}

action_warn () {
	local M
	
	msg_box -p -PG "<I>Please respond|$(str_unicode_line 14)| |${#_MARKED} $(str_pluralize ${_OBJECT} ${#_MARKED}) selected"

	if [[ ${_MSG_KEY} == 'n' ]];then
		for M in ${_MARKED};do
			_MARKED[${M}]=0
			list_set_selected ${M} ${_AVAIL_ROW}
		done
	fi
}

delete_favorite () {
	local FAV=${1}

	msg_box -p -PD "Deleting: ${FAV}?"
	if [[ ${_MSG_KEY} == 'y' ]];then
		if [[ -s ${_YTS_FAVORITES} ]];then
			[[ -e /tmp/favlist.new ]] && /bin/rm -f /tmp/favlist.new
			while read LINE;do
				[[ ${LINE} =~ ${FAV} ]] && continue
				echo ${LINE} >> /tmp/favlist.new
			done < ${_YTS_FAVORITES}
			mv -f /tmp/favlist.new ${_YTS_FAVORITES}
		else
			exit_leave "No favorites have been saved"
		fi
	fi
}

get_favorite () {
	local -a _DISPLAY_LIST=()
	local LINE
	local F P

	while true;do
		if [[ -s ${_YTS_FAVORITES} ]];then
			_DISPLAY_LIST=()
			while read LINE;do
				F=$(cut -d'|' -f1 <<<${LINE})
				P=$(cut -d'|' -f2 <<<${LINE})
				_FAVORITE_ENGINE[${F}]=${P}
				if [[ ${g_QRY_ENGINE} == 'rumble' ]];then
					[[ ${P:l} == 'r' || ${P:l} == 'rl' ]] && _DISPLAY_LIST+=${F}
				else
					[[ ${P:l} == 'y' ]] && _DISPLAY_LIST+=${F}
				fi
			done < ${_YTS_FAVORITES}
		else
			exit_leave "No favorites have been saved"
		fi

		selection_list_set ${(o)_DISPLAY_LIST}
		selection_list_set_page_key_help "(<w>r<N>)umble list, (<w>y<N>)outube list, (<w>d<N>)elete favorite"

		clear

		_SELECTION_VALUE=?
		selection_list "<w>Run ${(C)g_QRY_ENGINE} query  from history or <h>(q)uit<N>"

		[[ ${_SELECTION_VALUE} == '?' ]] && exit_leave

		case ${_SELECTION_KEY} in
			d) delete_favorite ${_SELECTION_VALUE} && _DISPLAY_LIST=() && continue;;
			r) g_QRY_ENGINE='rumble' && continue;;
			y) g_QRY_ENGINE='youtube' && continue;;
		esac
		break
	done

	g_FAVORITE=${_SELECTION_VALUE}
}

get_field () {
	local FIELD=${1}
	local NDX=${2}
	local STR

	[[ ${_DEBUG} -gt 2 ]] && dbg "${0}:${LINENO} ARGS:FIELD:${FIELD}, NDX:${NDX}"
	[[ ${_DEBUG} -gt 2 ]] && dbg "${0}:${LINENO} _LIST[NDX]:${_LIST[${NDX}]}"

	if [[ ${g_QRY_ENGINE} == 'rumble' ]];then
		case ${FIELD} in
			author) STR=$(cut -d'|' -f2 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[author]}]}";;
			title) STR=$(cut -d'|' -f3 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[title]}]}";;
			age) STR=$(cut -d'|' -f4 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[age]}]}";;
			url) STR=$(cut -d'|' -f5 <<<${_LIST[${NDX}]});STR="http://rumble.com${STR}";;
			time) STR=$(cut -d'|' -f6 <<<${_LIST[${NDX}]});STR="(${STR})";;
			agetime) STR=$(cut -d'|' -f4,6 <<<${_LIST[${NDX}]});STR="(${STR:s/|/ /})";;
		esac
		[[ -z ${STR} ]] && STR="Unknown"
	else
		case ${FIELD} in
			age) STR=$(cut -d'|' -f1 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[age]}]}";;
			author) STR=$(cut -d'|' -f2 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[author]}]}";;
			title) STR=$(cut -d'|' -f3 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[title]}]}";;
			url) STR=$(cut -d'|' -f4 <<<${_LIST[${NDX}]});;
			time) STR=$(cut -d'|' -f5 <<<${_LIST[${NDX}]});STR="(${STR})";;
			agetime) STR=$(cut -d'|' -f1,5 <<<${_LIST[${NDX}]});STR="(${STR:s/|/ /})";;
		esac
	fi

	[[ ${_DEBUG} -gt 2 ]] && dbg "${0}:${LINENO} Returning STR:${STR}"

	STR=$(iconv -f utf-8 -t ascii//translit <<<${STR}) #Scrub non ascii
	echo -n ${STR[1,65]}
}

item_decorate () {
	local NDX=${1}
	local STR

	if [[ ${_DOWNLOADS[${NDX}]} == 'true' ]];then
		STR="Downloaded..."
	elif [[ ${_FAILED[${NDX}]} == 'true' ]];then
		STR="Failed..."
	elif [[ ${_FUTURE[${NDX}]} == 'true' ]];then
		STR="Future..."
	else
		STR="$(get_field agetime ${NDX})"
	fi

	echo -n ${STR[1,${_FIELD_LEN[agetime]}]}
}

kill_job () {
	local JOB
	local RC

	JOB=$(ps -h -p ${g_PID})
	RC=$?
	
	if [[ ${RC} -eq 0 ]];then
		kill -9 ${g_PID} >/dev/null 2>&1
	fi

	if [[ ! ${functrace[1]} =~ "reset_job" ]];then
		trap - INT # disable trap
		[[ ${_DEBUG} -eq 0 ]] && rm -f ${g_LOG}
		exit_leave "${_SCRIPT}:${WHITE_FG}Download Job${RESET}:${JOB} ${WHITE_FG}was ${RED_FG}killed${RESET}"
	fi
}

post_process () {
	local -a KEYWORDS=("judge_napolitano_-_" "official" "afshin_rattansi_s_" "the_" "_show")
	local K

	msg_box "Post processing..."

	for K in ${KEYWORDS};do
		fsub -iy ${K} ${_DOWNLOAD_DIR} >/dev/null 2>&1
	done
}

reset_job () {
	kill_job
	msg_box -t.2 -x$((COORDS[X]+5)) -y$((COORDS[Y] + COORDS[W] -25)) "<m>Job Restarted<N>"
}

rumble () {
	local SEARCHTERM=${@}
	local -a AGES
	local -a CHANNELS
	local -a DURATIONS
	local -a LINKS
	local -a TITLES
	local -a VID_LIST=()
	local AGE
	local CHANNEL
	local GEN_SEARCH
	local LIVE
	local PG
	local X

	PG=$(wget -q -O - "http://rumble.com/c/${SEARCHTERM}?page=1")

	if [[ -n ${PG} ]];then # channel search
		[[ ${_FAVORITE_ENGINE[${SEARCHTERM}]:l} == 'r' ]] && g_LIVE=false
		[[ ${_FAVORITE_ENGINE[${SEARCHTERM}]:l} == 'rl' ]] && g_LIVE=true
		LIVE=$(pup '.channel-subheader--menu-item attr{href}' <<<${PG} | grep "livestreams")
		[[ ${g_LIVE} == 'true' && -n ${LIVE} ]] && PG=$(wget -q -O - "http://rumble.com${LIVE}")
		[[ ${PG:l} =~ "no videos found" ]] && msg_box "<r>No livestreams<N> for ${SEARCHTERM}|Falling back to defaults..." && PG=$(wget -q -O - "http://rumble.com/c/${SEARCHTERM}?page=1")

		g_SEARCH_TYPE=channel
		TITLES=("${(f)$(pup --charset utf8 '.title__link text{}' <<<${PG} | tut blank_lines | iconv -f utf-8 -t ascii//TRANSLIT | sed 's/|//g')}")
		AGES=("${(f)$(pup --charset utf8 '.videostream__data text{}' <<<${PG} | tut blank_lines | tr '[\012|\015]' '[ ]' | sed -e 's/comments /comments\n/g')}")
		LINKS=("${(f)$(pup --charset utf8 'a.videostream__link attr{href}' <<<${PG})}")
		DURATIONS=("${(f)$(pup --charset utf8 '.videostream__badge text{}' <<<${PG} | tut blank_lines)}")

		for ((X=1; X<=${#TITLES}; X++));do
			AGE=$(sed 's/ago .*/ago/' <<<${AGES[${X}]})
			[[ -z ${AGE} ]] && continue
			VID_LIST+="${X}|${SEARCHTERM}|${TITLES[${X}]}|${AGE}|${LINKS[${X}]}|${DURATIONS[${X}]}"
		done
	else # general search
		g_SEARCH_TYPE=general
		GEN_SEARCH=$(sed 's/ /%20/g' <<<${SEARCHTERM})
		PG=$(wget -q -O - "https://rumble.com/search/all?q=${GEN_SEARCH}")
		TITLES=("${(f)$(pup --charset utf8 '.video-item--title text{}' <<<${PG} | iconv -f utf-8 -t ascii//TRANSLIT | sed 's/|//g')}")
		AGES=("${(f)$(pup --charset utf8 '.video-item--meta attr{datetime}' <<<${PG})}")
		DURATIONS=("${(f)$(pup --charset utf8 '.video-item--duration attr{data-value}' <<<${PG})}")
		LINKS=("${(f)$(pup --charset utf8 '.video-item--a attr{href}' <<<${PG})}")
		CHANNELS=("${(f)$(pup --charset utf8 '.video-item--by-a attr{href}' <<<${PG})}")

		for ((X=1; X<=${#TITLES}; X++));do
			AGE=$(sed 's/T.*//' <<<${AGES[${X}]})
			CHANNEL=$(sed 's#^.*/##' <<<${CHANNELS[${X}]})
			CHANNEL="${(C)SEARCHTERM} (${CHANNEL})"
			VID_LIST+="${X}|${CHANNEL}|${TITLES[${X}]}|${AGE}|${LINKS[${X}]}|${DURATIONS[${X}]}"
		done
	fi

	if [[ ${g_SEARCH_TYPE} == 'general' ]];then
		_LOCAL_LIST=("${(f)$(for L in ${VID_LIST};do echo ${L};done | sort -t'|' -k4.1,4.10 -r)}")
	else
		_LOCAL_LIST=(${VID_LIST})
	fi

	# Display search results
	if ! arr_is_populated "${_LOCAL_LIST}";then
		return 1
	fi
	return 0
}

select_download () {
	local SEARCHTERM=${1:=Unknown}
	local SEARCHTYPE

	[[ ${_DEBUG} -gt 2 ]] && dbg "${0}:${LINENO} ${GREEN_FG}LOCAL_LIST COUNT${RESET}:${#_LOCAL_LIST}"
	[[ ${_DEBUG} -gt 2 ]] && dbg "${0}:${LINENO} ${_LOCAL_LIST}"

	SEARCHTYPE=Videos
	if [[ ${g_QRY_ENGINE:l} == 'rumble' && ${g_LIVE} == 'true' ]];then
		SEARCHTYPE=Live
	elif [[ ${g_QRY_ENGINE:l} == 'youtube' && ${g_STRICT} == 'true' ]];then
		SEARCHTYPE=${g_STRICT_MSG}
	fi

	#set headings
	list_set_header_init
	list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} $(str_pluralize video ${#_LIST})\tPlatform:${WHITE_FG}%s${RESET}\tQuery Key:${WHITE_FG}%s${RESET}\tQuery Type:${WHITE_FG}%s${RESET}\tSelected:${WHITE_FG}%s${RESET}\t${_PG}" ${#_LIST} ${(C)g_QRY_ENGINE} ${SEARCHTERM} ${SEARCHTYPE} $(list_get_selected_count)'
	list_set_header 'printf " "'
	list_set_header 'printf "%*s %-*s %-*s %-*s" 5 "" ${_FIELD_LEN[age]} "Age" ${_FIELD_LEN[author]} "Author" ${_FIELD_LEN[title]} "Title"'
	list_set_header 'printf "%*s ${MAGENTA_FG}%-*s %*s %*s${RESET}" 5 "" ${_FIELD_LEN[age]} "$(str_unicode_line ${_FIELD_LEN[age]})" ${_FIELD_LEN[author]} "$(str_unicode_line ${_FIELD_LEN[author]})" ${_FIELD_LEN[title]} "$(str_unicode_line ${_FIELD_LEN[title]})"'

	#set line item
	list_set_line_item ' 
	local ITEM_COLOR=$(set_item_color $(item_decorate ${_LIST_NDX}));
	printf "${BOLD}${WHITE_FG}%4s${RESET}) ${SHADE}${BAR}${ITEM_COLOR}%-${_FIELD_LEN[age]}s${RESET}${SHADE}${BAR} %-${_FIELD_LEN[author]}s %-${_FIELD_LEN[title]}s${RESET}\n" ${_LIST_NDX} "$(item_decorate ${_LIST_NDX})"  "$(get_field author ${_LIST_NDX})"  "$(get_field title ${_LIST_NDX})" 
	'

	list_set_prompt "Hit <${GREEN_FG}SPACE${RESET}> to select ${_OBJECT}(s) then <${GREEN_FG}ENTER${RESET}> to ${_ACTION} ${_OBJECT}(s) (${ITALIC}or exit if none selected${RESET})"
	list_set_action_msgs video download
	list_set_sortable true
	list_set_max_sort_col 3
	[[ ${g_SEARCH_TYPE} != 'general' ]] && list_set_sort_default 1
	list_set_barlines true

	while true;do
		#get selection
		list_reset
		list_select ${_LOCAL_LIST}
		[[ ${?} -eq 0 ]] && break

		#get selections
		_MARKED=($(list_get_selected))
		
		if [[ $(list_get_selected_count) -ne 0 ]];then
			action_warn
			if [[ ${_MSG_KEY} == "y" ]];then
				action_do
			fi
		fi
	done

	_DOWNLOADS=()
	_FAILED=()
	_FUTURE=()
}

set_favorite () {
	local FAV=${1}
	local -aU HISTORY
	local LINE
	local H

	[[ ${_DEBUG} -ge 1 ]] && dbg "${0}:${LINENO} ARG: FAV:${FAV}"

	FAV=$(str_trim ${FAV})
	[[ -z ${#FAV} ]] && return

	if [[ ${g_QRY_ENGINE:l} == 'rumble' ]];then
		[[ ${g_LIVE} == 'true' ]] && FAV="${FAV}|RL" || FAV="${FAV}|R"
	else
		FAV="${FAV}|Y"
	fi

	HISTORY+=${FAV}

	if [[ -e ${_YTS_FAVORITES} ]];then
		while read LINE;do
			HISTORY+=${LINE}
		done < ${_YTS_FAVORITES}

		/bin/rm -f ${_YTS_FAVORITES}
	fi

	for H in ${(o)HISTORY};do
		echo ${H} >> ${_YTS_FAVORITES}
	done
}

set_item_color () {
	local ITEM=${1}

	case ${ITEM:l} in
		downloaded*) echo ${GREEN_FG};;
		failed*) echo ${RED_FG};;
		future*) echo ${CYAN_FG};;
		*) echo '';;
	esac
}

start_job () {
	local URL=${@}

	g_LOG=$(mktemp /tmp/yt.log.XXXXXX)

	nohup yt -i -o "%(channel)s - %(title)s.%(ext)s" ${URL} >>${g_LOG} 2>&1 &
	g_PID=$!

	#nohup ./log_sim ./yt.log.error.data >>${g_LOG} 2>&1 &
	#nohup ./log_sim ./yt.log.noerror.data >>${g_LOG} 2>&1 &
	
}

total_rejects () {
	local TL_VIDS=${1}
	local K
	local TL_RJ=0
	local -F1 RJ_PCT=0

	for K in ${(k)_REJECTS};do
		[[ ${_REJECTS[${K}]} == 'true' ]] && ((TL_RJ++))
	done

	TL_VIDS=${TL_VIDS}.00
	TL_RJ=${TL_RJ}.00

	[[ ${TL_RJ} -ne 0 ]] && RJ_PCT=$(( (TL_RJ/TL_VIDS) * 100 ))

	echo "${RJ_PCT}%"
}

youtube () { 
	local DATA
	local LINE
	local PROXY_CMD
	local NDX

	[[ -n ${g_FAVORITE} ]] && PROXY_CMD="${g_PROXY_CMD} ${g_FAVORITE:q}" || PROXY_CMD="${g_PROXY_CMD}"

	#Youtube query log
	[[ -e ${g_LOG} ]] && /usr/bin/rm -f ${g_LOG} # clear log

	# Command line processing is in the js script - only proxy the script
	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} PROXY COMMAND: ${WHITE_FG}${PROXY_CMD}${RESET}"

	_LOCAL_LIST=()

	NDX=0
	while read LINE;do
		[[ ${LINE:l} =~ 'matched' ]] && DATA=true && continue
		((NDX++))
		[[ ${LINE:l} =~ 'rejected' ]] && _REJECTS[${NDX}]=true || _REJECTS[${NDX}]=false
		[[ ${LINE:l} =~ 'usage' && ${DATA} != 'true' ]] && DATA=info
		[[ ${LINE:l} =~ 'error' && ${DATA} != 'true' ]] && DATA=info
		[[ ${_REJECTS[${NDX}]} == 'false' && ${DATA} == 'true' ]] && _LOCAL_LIST+=${LINE:s/Streamed //}
	done< <(eval ${PROXY_CMD})

	[[ ${g_STRICT} == 'true' ]] && g_STRICT_MSG="STRICT REJECTS:$(total_rejects ${NDX})" || g_STRICT_MSG=''

	[[ ${_DEBUG} -gt 0 ]] && dbg "${0}:${LINENO} _LOCAL_LIST:${WHITE_FG}${#_LOCAL_LIST}${RESET}"

	[[ ${_SMCUP} == 'false' ]] && do_smcup

	if [[ ${DATA} == 'info' ]];then
		exit_leave
	fi

	# Display search results
	if ! arr_is_populated "${_LOCAL_LIST}";then
		return 1
	fi

	return 0
}

#--GetOpts--
read -r -d '' DESC<<EOF
Query either Youtube or Rumble for videos.
\tyts functions as proxy for yts.js (node yt-search client)
\tor executes and parses Rumble queries.  Queries provide
\ta selection list of matching videos. Following selection, 
\titems are downloaded via yt-dlp. By default, Rumble queries
\tfor livestreams and falls back to videos if no livestreams
\tare found. The -L option will override this behavior. When
\tsaving favorites, both query and platform are recorded.
EOF

opt_type () {
	local OPT=${1}
	case ${OPT} in
		f) echo "<SEARCHTERM>";;
	esac
}

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local O

	for O in {1..${#OPTS}};do
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+="<PARAM>" && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${OPTS} $(opt_type f)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-R${RESET} Rumble query [default is YouTube]"
	echo -e "${WHITE_FG}-L${RESET} no livestreams (Rumble)"
	echo -e "${WHITE_FG}-a${RESET} age filter [all,min,hour,day,week,month,year] (YouTube)"
	echo -e "${WHITE_FG}-s${RESET} strict filter [author must match query] (YouTube)"
	echo -e "${WHITE_FG}-v${RESET} yt-search version (YouTube)"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"
	) >&2
}

OPTSTR=":HDRLva:s"
OPTIND=0

HELP_OPT=false
g_STRICT=false
g_QRY_ENGINE=youtube
g_LIVE=true

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;HELP_OPT=true;;
     D) dbg_set_level;;
     R) g_QRY_ENGINE=rumble;;
     L) g_LIVE=false;;
     a) AGE=${OPTARG};;
     s) g_STRICT=true;;
    \?) exit_leave "${RED_FG}Error${RESET}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}";;
	  :) exit_leave "${RED_FG}Error${RESET}: option -${OPTARG} requires an argument${RESET}";;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

#Execution
RAWPATH=$(path_get_raw)
FPATH=$(cut -d'|' -f1 <<<${RAWPATH})
FGLOB=$(cut -d'|' -f2 <<<${RAWPATH})
PATHLBL=$(path_get_label 40)

# Arg handling for yts.js
if [[ ${g_QRY_ENGINE} == 'youtube' ]];then
   if [[ ${HELP_OPT} == 'true' ]];then
		echo "\n${WHITE_ON_GREY}YouTube backend help${RESET}\n"
		eval "node ${_JS_SCRIPT} -h"
		exit_leave
	fi

	RCL=$(path_get_raw_cmdline | sed "s/${_SCRIPT}//")
	RCL=$(sed 's/\-h//' <<<${RCL}) # front end option only

	[[ ${_DEBUG} -gt 0 ]] && RCL=$(sed 's/\-D* //' <<<${RCL}) # front end option only

	if [[ ${RCL:l} =~ '-v' ]];then
		echo -n "yt-search version:${WHITE_FG}"
		node ${_JS_SCRIPT} --version
		echo ${RESET}
		exit_leave
		[[ ${?} -ne 0 ]] && exit_leave "${RED_FG}Invalid argument${RESET} - valid age arguments: ${WHITE_FG}all,min,day,week,month,year${RESET}"
	fi

	g_PROXY_CMD="node ${_JS_SCRIPT} ${RCL}"
else
   [[ ${HELP_OPT} == 'true' ]] && exit_leave
fi

# Query site for video list 
if [[ ${#} -eq 0 ]];then
	while true;do
		do_smcup
		get_favorite
		if [[ -n ${g_FAVORITE} ]];then
			msg_box "Requesting videos for <B><I>${g_FAVORITE}<N>..."
			${g_QRY_ENGINE} ${g_FAVORITE}
			if [[ ${?} -eq 0 ]];then
				select_download ${g_FAVORITE}
			fi
		fi
	done
else
	${g_QRY_ENGINE} ${@}
	if [[ ${?} -eq 0 ]];then
		select_download ${@}
		set_favorite ${@}
	fi
fi

[[ ${_DEBUG} -eq 0 ]] && rm -f ${g_LOG}

exit_leave
