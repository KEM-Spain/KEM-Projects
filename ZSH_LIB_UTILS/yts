#!/usr/bin/zsh

#Inline ansi
BOLD="\033[1m"
ITALIC="\033[3m"
RESET="\033[m"
REVERSE="\033[7m"
STRIKE="\033[9m"
UNDER="\033[4m"

BLACK_BG="\033[40m"

BLUE_FG="\033[34m"
CYAN_FG="\033[36m"
GREEN_FG="\033[32m"
MAGENTA_FG="\033[35m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"
YELLOW_FG="\033[33m"

WHITE_ON_GREY="\033[0m\033[0;1;37;100m"
#Declarations
typeset -a _LOCAL_LIST
typeset -a _RUMBLE_VIDEOS
typeset -A _DOWNLOADS
typeset -A _FAILED
typeset -A _FIELD_LEN
typeset -A _STATUS_MSGS
typeset -A _REJECTS
typeset -A COORDS=(X 10 Y 38 H 10 W 86)

#Constants
_DOWNLOAD_DIR=~/Downloads
_ERROR_MSG=''
_FAVORITE=''
_FIELD_LEN[age]=30
_FIELD_LEN[author]=26
_FIELD_LEN[title]=90
_JS_SCRIPT=/usr/local/etc/yts.js
#_JS_SCRIPT=./yts.js
_LOG=/tmp/yt.log
_YTS_FAVORITES=~/.yts_history
_PID=0
_RUMBLE=''

#Globals
g_ACTION=action
g_OBJECT=object
g_PLATFORM=''

#Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/LIST.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/SEL_LIST.zsh

for D in ${=_DEPS_};do
	if [[ -e ${_LIB_DIR}/${D} ]];then
		source ${_LIB_DIR}/${D}
	else
		echo "Cannot source:${_LIB_DIR}/${D} - not found"
		exit 1
	fi
done

#Functions
action_do () {
	local -A ERROR_SEEN=()
	local -A LOG_SIZE
	local -a ETAS
	local -a LOG_LINES
	local -a MSGS
	local DEST
	local DEST_1
	local DEST_2
	local DL_CNT=0
	local ERROR
	local HAS_ERRORS=false
	local HDRS_OUT=false
	local LAST_SIZE=0
	local LOG_ACTIVE=false
	local L M S 
	local ETA
	local EMSG
	local NDX=0
	local PAUSE=2
	local SCAN_LIMIT=0
	local SCAN_MAX=10
	local STALLS=0
	local TITLE
	local URL
	local LOG_LINE

	msg_box_clear

	for M in ${_MARKED};do
		((DL_CNT++))
		_DOWNLOADS[${DL_CNT}]=false
		_FAILED[${DL_CNT}]=false
		ERROR_SEEN[${DL_CNT}]=false
		URL=$(get_field url ${M})
		HDRS_OUT=false

		[[ -e ${_LOG} ]] && rm -f ${_LOG}

		_PID=$(start_job ${URL})
		msg_box -x$(( COORDS[X] +1 )) "Download requested..."

		while true;do
			((NDX++))
			
			if [[ ! -e ${_LOG} ]];then
				[[ ${NDX} -gt 10 ]] && exit_leave "${_LOG} not detected" # no activity
			fi

			# Get headers
			LOG_LINE=$(grep -m1 -i "destination" ${_LOG})
			if [[ ${?} -eq 0 && ${HDRS_OUT} == 'false' ]];then
				DEST=("${(f)$(sed -e 's#Downloads/#Downloads|#g' -e 's/ \[.*//g' <<<${LOG_LINE})}")
				DEST_1=$(cut -d'|' -f1 <<<${DEST})
				DEST_2=$(cut -d'|' -f2 <<<${DEST})
				msg_box -C -R -H3 -jl -x${COORDS[X]} -y${COORDS[Y]} -h${COORDS[H]} -w${COORDS[W]} "<c>${DEST_1}<N>"
				msg_box -C -jl "<m>Downloading:<c>[title] ${DEST_2[1,60]}<N>"
				msg_box -C -jl "<m>$(str_unicode_line $(( COORDS[W] - 4 )))<N>"
				HDRS_OUT=true
			fi

			# Scan for already downloaded
			LOG_LINE=$(grep -m1 -i "already been" ${_LOG})
			if [[ ${?} -eq 0 ]];then
				TITLE=$(get_field title ${M})
				EMSG="<w>${TITLE[1,65]}<N>|<g>Has already been downloaded<N>" 
				msg_box -p -PK "${EMSG}"
				_DOWNLOADS[${M}]=true
				break
			fi

			# Scan for not yet available
			LOG_LINE=$(grep -m1 -i "will begin\|premieres" ${_LOG})
			if [[ ${?} -eq 0 ]];then
				TITLE=$(get_field title ${M})
				EMSG="<w>${TITLE[1,65]}<N>|<r>Not yet available<N>|<g>${LOG_LINE}<N>" 
				msg_box -p -PK "${EMSG}"
				_FAILED[${M}]=true
				break
			fi

			# Scan for errors
			LOG_LINES=("${(f)$(tail -1 ${_LOG} | sed 's// /g' | grep -i 'error')}")
			if [[ ${?} -eq 0 ]];then
				for L in ${LOG_LINES};do
					case ${L:l} in
						*giving\ up*)	TITLE=$(get_field title ${M})	
											EMSG="<w>${TITLE[1,65]}<N>|<r>Download failed - Network failure<N>" 
											msg_box -p -PK "${EMSG}"
											_FAILED[${M}]=true
											break 2
											;;
				 *network*|*retry*)	msg_box -t.2 -x15 -y100 "<r>Network Errors<N>"
											;;
					esac
				done
			fi

			# Scan for progress
			if [[ ${HDRS_OUT} == 'true' ]];then
				LOG_LINE=$(tail -1 ${_LOG})
				case ${LOG_LINE:l} in
					*eta*)	ETAS+=("${(f)$(sed 's//\n/g' <<<${LOG_LINE} | grep -vi 'unknown')}")
								ETA=$(sed 's/^\(.*:[0-9][0-9]\)\(.*\)/\1/' <<<${ETAS[-1]})
								msg_box -C -jl "<w>${ETA}<N>"
								if [[ ${ETA} =~ '100%' ]];then
									if [[ ${#_MARKED} -gt 1 ]];then
										msg_box -C -jc "<g><b>$(str_unicode_line 10)<N>"
										msg_box -t${PAUSE} -x$(( COORDS[X] +1 )) "Download ${DL_CNT} completed - $((${#_MARKED}-DL_CNT)) remaining"
									fi
									_DOWNLOADS[${M}]=true
									break
								fi
								;;
				esac
			fi
			sleep .1
		done
		NDX=0
	done

	for M in ${_MARKED};do
		_MARKED[${M}]=0
		list_set_selected ${M} ${_USED_ROW}
	done

	post_process
}

action_warn () {
	local M
	
	msg_box -p -PG "<I>Please respond|$(str_unicode_line 14)| |${#_MARKED} $(str_pluralize ${g_OBJECT} ${#_MARKED}) selected"

	if [[ ${_MSG_KEY} == 'n' ]];then
		for M in ${_MARKED};do
			_MARKED[${M}]=0
			list_set_selected ${M} ${_GHOST_ROW}
		done
	fi
}

item_decorate () {
	local NDX=${1}
	local STR

	if [[ ${_DOWNLOADS[${NDX}]} == 'true' ]];then
		STR="Downloaded..."
	elif [[ ${_FAILED[${NDX}]} == 'true' ]];then
		STR="Failed..."
	else
		STR="$(get_field age ${NDX}) $(get_field time ${NDX})"
		[[ ${_DEBUG} -gt 2 ]] && dbg "${0}:${LINENO} Returning STR:${STR}"
	fi

	echo -n ${STR[1,${_FIELD_LEN[age]}]}
}

get_favorite () {
	local -a _DISPLAY_LIST
	local LINE
	local F P

	if [[ -s ${_YTS_FAVORITES} ]];then
		while read LINE;do
			F=$(cut -d'|' -f1 <<<${LINE})
			P=$(cut -d'|' -f2 <<<${LINE})
			if [[ ${g_PLATFORM:l} == 'rumble' ]];then
				[[ ${P:l} == 'r' ]] && _DISPLAY_LIST+=${F}
			else
				[[ ${P:l} == 'y' ]] && _DISPLAY_LIST+=${F}
			fi
		done < ${_YTS_FAVORITES}
	else
		exit_leave "No favorites have been saved"
	fi

	selection_list_set ${(o)_DISPLAY_LIST}

	_SELECTION_VALUE=?
	selection_list "<w>Run ${(C)g_PLATFORM} query  from history or <h>(q)uit<N>"
	[[ ${_SELECTION_VALUE} == '?' ]] && exit_leave

	_FAVORITE=${_SELECTION_VALUE}
}

get_field () {
	local FIELD=${1}
	local NDX=${2}
	local STR

	[[ ${_DEBUG} -gt 2 ]] && dbg "${0}:${LINENO} ARGS:FIELD:${FIELD}, NDX:${NDX}"
	[[ ${_DEBUG} -gt 2 ]] && dbg "${0}:${LINENO} _LIST[NDX]:${_LIST[${NDX}]}"

	if [[ ${_RUMBLE} == 'true' ]];then
		case ${FIELD} in
			author) STR=$(cut -d'|' -f2 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[author]}]}";;
			title) STR=$(cut -d'|' -f3 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[title]}]}";;
			age) STR=$(cut -d'|' -f4 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[age]}]}";;
			url) STR=$(cut -d'|' -f5 <<<${_LIST[${NDX}]});STR="http://rumble.com${STR}";;
			time) STR=$(cut -d'|' -f6 <<<${_LIST[${NDX}]});STR="(${STR})";;
		esac
		[[ -z ${STR} ]] && STR="Unknown"
	else
		case ${FIELD} in
			age) STR=$(cut -d'|' -f1 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[age]}]}";;
			author) STR=$(cut -d'|' -f2 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[author]}]}";;
			title) STR=$(cut -d'|' -f3 <<<${_LIST[${NDX}]});STR="${STR[1,${_FIELD_LEN[title]}]}";;
			url) STR=$(cut -d'|' -f4 <<<${_LIST[${NDX}]});;
			time) STR=$(cut -d'|' -f5 <<<${_LIST[${NDX}]});STR="(${STR})";;
		esac
	fi

	[[ ${_DEBUG} -gt 2 ]] && dbg "${0}:${LINENO} Returning STR:${STR}"

	#STR=$(echo ${STR} | tr -cd '\11\12\15\40-\176')
	STR=$(iconv -f utf-8 -t ascii//translit <<<${STR}) #Scrub non ascii
	echo -n ${STR[1,65]}
}

post_process () {
	local -a KEYWORDS=("judge napolitano" "official")
	local FN_CLEAN
	local F K
	local -a LIST

	echo "Post processing..."
	LIST=("${(f)$(find ${_DOWNLOAD_DIR} -maxdepth 1 -type f ! -path ${_DOWNLOAD_DIR})}")

	for F in ${LIST};do
		for K in ${KEYWORDS};do
			if [[ ${F:l} =~ ${K:l} ]];then
				FN_CLEAN=$(sed -e "s/${K}//i" -e 's/^ *-//' -e 's/^[[:blank:]]*//;s/[[:blank:]]*$//' <<<${F:t})
				mv -f ${F} ${F:h}/${FN_CLEAN}
			fi
		done
	done
}

query_is_valid () {
	local RC1=0
	local RC2=0
	local RC=0
	local FSIZE_1=0
	local FSIZE_2=0
	local NDX=0
	local STABLE=0

	if [[ -e ${_LOG} ]];then
		while true;do
			((NDX++))
			FSIZE_1=$(wc -l < ${_LOG})
			sleep .2
			FSIZE_2=$(wc -l < ${_LOG})
			[[ ${FSIZE_1} -ne ${FSIZE_2} ]] && continue || ((STABLE++))
			[[ ${STABLE} -ge 10 ]] && break
			grep -iq 'error' ${_LOG}
			[[ ${?} -eq 0 ]] && break
			[[ ${NDX} -ge 100 ]] && break
		done

		_ERROR_MSG=$(grep -i "error" ${_LOG})
		RC1=${?}

		if [[ ${RC1} -eq 0 ]];then
			[[ ${_ERROR_MSG} =~ 'will begin' ]] && _ERROR_MSG=${(C)$(grep -o 'will begin .*' ${_LOG})}
			RC2=${?}
		else
			_ERROR_MSG=''
		fi
	else
		return 0
	fi

	echo ${_ERROR_MSG}

	RC=$((RC1 + RC2))
	[[ ${RC} -eq 0 ]] && return 1 || return 0
}

rumble () {
	local SEARCH=${@}
	local -a VIDEOS
	local -a A1
	local -a A2
	local -a A3
	local -a A4
	local AGE
	local PG
	local X

#TODO: Alternate more general search - different parse required
#	if [[ -z ${PG} ]];then
#		SEARCH=$(sed 's/ /%20/g' <<<${SEARCH})
#		PG=$(wget -q -O - "https://rumble.com/search/all?q=${SEARCH}")
#		echo ${PG} >x
#	fi

	PG=$(wget -q -O - "http://rumble.com/c/${SEARCH}?page=1")
	A1=("${(f)$(pup '.title__link text{}' <<<${PG} | tut blank_lines | sed 's/|//g' | html2text -ascii)}")
	A2=("${(f)$(pup '.videostream__data text{}' <<<${PG} | tut blank_lines | tr '[\012|\015]' '[ ]' | sed -e 's/comments /comments\n/g')}")
	A3=("${(f)$(pup 'a.videostream__link attr{href}' <<<${PG})}")
	A4=("${(f)$(pup '.videostream__badge text{}' <<<${PG} | tut blank_lines)}")

	for ((X=1; X<=${#A1}; X++));do
		AGE=$(sed 's/ago .*/ago/' <<<${A2[${X}]})
		[[ -z ${AGE} ]] && continue
		_RUMBLE_VIDEOS+="${X}|${SEARCH}|${A1[${X}]}|${AGE}|${A3[${X}]}|${A4[${X}]}"
	done
}

set_favorite () {
	local ITEM=${1}
	local -aU HISTORY
	local LINE
	local H

	[[ ${_DEBUG} -ge 1 ]] && dbg "${0}:${LINENO} ARG: ITEM:${ITEM}"

	ITEM=$(str_trim ${ITEM})

	[[ ${g_PLATFORM:l} == 'rumble' ]] && ITEM="${ITEM}|R" || ITEM="${ITEM}|Y"

	[[ ${#ITEM} -le 1 ]] && return

	HISTORY+=${ITEM}

	if [[ -e ${_YTS_FAVORITES} ]];then
		while read LINE;do
			HISTORY+=${LINE}
		done < ${_YTS_FAVORITES}

		/bin/rm -f ${_YTS_FAVORITES}
	fi

	for H in ${(o)HISTORY};do
		echo ${H} >> ${_YTS_FAVORITES}
	done
}

start_job () {
	local URL=${@}
	local PID

	nohup yt -i -o "%(channel)s - %(title)s.%(ext)s" ${URL} >>${_LOG} 2>&1 &

	#nohup ./log_sim ./yt.log.error.data >>${_LOG} 2>&1 &
	#nohup ./log_sim ./yt.log.noerror.data >>${_LOG} 2>&1 &
	
	PID=$(pgrep -n yt)
	[[ -z ${PID} ]] && exit_leave "${0}:unable to start job"

	echo ${PID}
}

total_rejects () {
	local TL_VIDS=${1}
	local K
	local TL_RJ=0
	local -F1 RJ_PCT=0

	for K in ${(k)_REJECTS};do
		[[ ${_REJECTS[${K}]} == 'true' ]] && ((TL_RJ++))
	done

	TL_VIDS=${TL_VIDS}.00
	TL_RJ=${TL_RJ}.00

	[[ ${TL_RJ} -ne 0 ]] && RJ_PCT=$(( (TL_RJ/TL_VIDS) * 100 ))

	echo "${RJ_PCT}%"
}

#--GetOpts--
read -r -d '' DESC<<EOF
Frontend for yt-search (yts)
\tHelp for frontend is above...
\tHelp for backend is below...\n
EOF

opt_type () {
	local OPT=${1}
	case ${OPT} in
		f) echo "<SEARCHTERM>";;
	esac
}

parse_opts () {
	local OPTS=${@}
	local -a OPTSTR
	local O

	for O in {1..${#OPTS}};do
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTR+="<PARAM>" && continue
		OPTSTR+="-${OPTS[${O}]}"
	done
	echo ${OPTSTR}
}

usage () {
	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})

	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	(
	echo -e "\n${WHITE_FG}Usage${RESET}: ${_SCRIPT} ${OPTS} $(opt_type f)\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-a${RESET} filter results by age of video (all,min,hour,day,week,month,year)"
	echo -e "${WHITE_FG}-f${RESET} display list of recent queries to choose from"
	echo -e "${WHITE_FG}-h${RESET} do not add query to history"
	echo -e "\n${WHITE_FG}Desc${RESET}:${DESC}"
	) >&2
}

OPTSTR=":HDva:hfrs"
OPTIND=0

DO_FAV=false
STRICT=false
HIST=true
_RUMBLE=false

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;eval "node ${_JS_SCRIPT} -h";exit_leave;;
     D) dbg_set_level;;
     a) AGE=${OPTARG};;
     f) DO_FAV=true;;
     h) HIST=false;;
     r) _RUMBLE=true;;
     s) STRICT=true;;
    \?) exit_leave "${RED_FG}Error${RESET}: ${BOLD}${RED_FG}Unknown option${RESET} -${OPTARG}";;
	  :) exit_leave "${RED_FG}Error${RESET}: option -${OPTARG} requires an argument${RESET}";;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

#Execution
cursor_off
if [[ ${_RUMBLE} == 'true' ]];then
	g_PLATFORM="Rumble"
	if [[ ${DO_FAV} == 'true' || ${#} -eq 0 ]];then
		do_smcup
		get_favorite
	fi
	if [[ -n ${_FAVORITE} ]];then
		rumble ${_FAVORITE}
	else
		rumble ${@}
	fi
	_LOCAL_LIST=(${_RUMBLE_VIDEOS})
else
	g_PLATFORM="YouTube"
	RAWPATH=$(path_get_raw)
	FPATH=$(cut -d'|' -f1 <<<${RAWPATH})
	FGLOB=$(cut -d'|' -f2 <<<${RAWPATH})
	PATHLBL=$(path_get_label 40)

	RCL=$(path_get_raw_cmdline | sed "s/${_SCRIPT}//")
	RCL=$(sed 's/\-h//' <<<${RCL}) # front end option only

	[[ ${_DEBUG} -ge 0 ]] && RCL=$(sed 's/\-D* //' <<<${RCL}) # front end option only

	if [[ ${RCL:l} =~ '-v' ]];then
		echo -n "yt-search version:${WHITE_FG}"
		node ${_JS_SCRIPT} --version
		echo ${RESET}
		exit_leave
	fi

	if [[ ${RCL:l} =~ '-a' ]];then
		echo ${RCL} | grep -q "\-a all\|min\|hour\|day\|week\|month\|year"
		[[ ${?} -ne 0 ]] && exit_leave "${RED_FG}Invalid argument${RESET} - valid age arguments: ${WHITE_FG}all,min,day,week,month,year${RESET}"
	fi

	if [[ ${DO_FAV} == 'true' || ${#} -eq 0 ]];then
		do_smcup
		get_favorite
	fi

	[[ -z ${_FAVORITE} ]] && PROXY_CMD="node ${_JS_SCRIPT} ${RCL}" || PROXY_CMD="node ${_JS_SCRIPT} ${RCL} ${_FAVORITE:q}"

	#Youtube query log
	[[ -e ${_LOG} ]] && /usr/bin/rm -f ${_LOG} # clear log

	# Command line processing is in the js script - only proxy the script
	[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:${LINENO} PROXY COMMAND: ${WHITE_FG}${PROXY_CMD}${RESET}"

	NDX=0
	while read LINE;do
		#echo "LINE:${LINE}" >> strict.out
		[[ ${LINE:l} =~ 'matched' ]] && DATA=true && continue
		((NDX++))
		[[ ${LINE:l} =~ 'rejected' ]] && _REJECTS[${NDX}]=true || _REJECTS[${NDX}]=false
		[[ ${LINE:l} =~ 'usage' && ${DATA} != 'true' ]] && DATA=info
		[[ ${LINE:l} =~ 'error' && ${DATA} != 'true' ]] && DATA=info
		[[ ${_REJECTS[${NDX}]} == 'false' && ${DATA} == 'true' ]] && _LOCAL_LIST+=${LINE:s/Streamed //}
	done< <(eval ${PROXY_CMD})

	[[ ${STRICT} == 'true' ]] && E_MSG="\nSTRICT REJECTS:${RED_FG}$(total_rejects ${NDX})${RESET}" || E_MSG=''

	[[ ${_DEBUG} -ge 0 ]] && dbg "${0}:${LINENO} _LOCAL_LIST:${WHITE_FG}${#_LOCAL_LIST}${RESET}"

	[[ ${_SMCUP} == 'false' ]] && do_smcup

	if [[ ${DATA} == 'info' ]];then
		exit_leave
	fi
fi

if ! arr_is_populated "${_LOCAL_LIST}";then
	exit_leave "No rows satisfied query${WHITE_FG}${E_MSG}${RESET}"
fi

[[ -n ${1} && ${HIST} == 'true' ]] && set_favorite ${1}

[[ ${_DEBUG} -gt 2 ]] && dbg "${0}:${LINENO} ${GREEN_FG}LOCAL_LIST COUNT${RESET}:${#_LOCAL_LIST}"
[[ ${_DEBUG} -gt 2 ]] && dbg "${0}:${LINENO} ${_LOCAL_LIST}"

#set headings
list_set_header 'printf "Found:${WHITE_FG}%-d${RESET} $(str_pluralize video ${#_LIST}) - Platform:${WHITE_FG}%s${RESET} ${_PG}" ${#_LIST} ${g_PLATFORM}'
list_set_header 'printf " "'
list_set_header 'printf "%*s %-*s %-*s %-*s" 5 "" ${_FIELD_LEN[age]} "Age" ${_FIELD_LEN[author]} "Author" ${_FIELD_LEN[title]} "Title"'
list_set_header 'printf "%*s ${MAGENTA_FG}%-*s %*s %*s${RESET}" 5 "" ${_FIELD_LEN[age]} "$(str_unicode_line ${_FIELD_LEN[age]})" ${_FIELD_LEN[author]} "$(str_unicode_line ${_FIELD_LEN[author]})" ${_FIELD_LEN[title]} "$(str_unicode_line ${_FIELD_LEN[title]})"'

#set line item
list_set_line_item ' 
printf "${BOLD}${WHITE_FG}%4s${RESET}) ${SHADE}${BAR}%-${_FIELD_LEN[age]}s %-${_FIELD_LEN[author]}s %-${_FIELD_LEN[title]}s${RESET}\n" ${_LIST_NDX} "$(item_decorate ${_LIST_NDX})"  "$(get_field author ${_LIST_NDX})"  "$(get_field title ${_LIST_NDX})" 
'

list_set_prompt "Hit <${GREEN_FG}SPACE${RESET}> to select ${g_OBJECT}(s) then <${GREEN_FG}ENTER${RESET}> to ${g_ACTION} ${g_OBJECT}(s) (${ITALIC}or exit if none selected${RESET})"
list_set_sortable true
list_set_max_sort_col 3
list_set_sort_default 1
list_set_barlines true

while true;do
	#get selection
	list_select ${_LOCAL_LIST}
	[[ ${?} -eq 0 ]] && break

	#get selections
	_MARKED=($(list_get_selected))
	
	if [[ $(list_get_selected_count) -ne 0 ]];then
		action_warn
		if [[ ${_MSG_KEY} == "y" ]];then
			action_do
		fi
	fi
done

exit_leave ${E_MSG}
