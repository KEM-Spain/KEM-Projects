#!/usr/bin/zsh
RESET="\033[m"
RED_FG="\033[31m"
GREEN_FG="\033[32m"
YELLOW_FG="\033[33m"
BLUE_FG="\033[34m"
MAGENTA_FG="\033[35m"
CYAN_FG="\033[36m"
WHITE_FG="\033[37m"
BOLD="\033[1m"

# Declarations
LIB=/usr/local/lib
typeset -a _DB_LIST
typeset -a _TB_LIST
typeset -a TABLES

# Globals
g_DELIM=' '
g_DB=''
g_TB=''

# Imports
_LIB_DIR=/usr/local/lib
source ${_LIB_DIR}/LIB_INIT.zsh
source ${_LIB_DIR}/UTILS.zsh
source ${_LIB_DIR}/SEL_LIST.zsh
source ${_LIB_DIR}/LIB_DEPS.zsh

# Functions
query () {
	local SQL=(${@})

sqlite3 -separator ${g_DELIM} ${g_DB} <<____END_SQL
.headers on
${SQL}
____END_SQL

return ${?}
}

set_db_list () {
	local -a LIST
	local L

	_DB_LIST=()
	LIST=("${(f)$(find . -maxdepth 1 -type f)}")

	for L in ${LIST};do
		[[ $(file ${L:l}) =~ "database\|sqlite" ]] && _DB_LIST+=${L}
	done

	if ! arr_is_populated "${_DB_LIST}";then
		return 1
	fi
	return 0
}

list_db () {
	local L

	if set_db_list;then
		for L in ${_DB_LIST};do
			echo ${L}
		done
	fi
}

select_db () {
	if set_db_list;then
		sel_list_set ${(o)_DB_LIST}
		sel_list "<w>Select database or <h>(q)uit<N>"
		[[ ${_SEL_VAL} == '?' ]] && exit_leave
		g_DB=${_SEL_VAL}
	fi
}

list_tab () {
		echo "${RESET}Tables in DB:${g_DB}"
		query .tables
		exit_leave
}

#--Begin GetOpts--
RESET="\033[m"
RED_FG="\033[31m"
WHITE_FG="\033[37m"

SCRIPT=${0:t}

read -r -d '' DESC<<EOF
Perform sqlite3 SQL query
EOF

parse_opts () {
	local OPTS=${@}
	local -a OPTSTRING
	local LETTER_OPT
	local O

	for O in {1..${#OPTS}};do
		[[ ${OPTS[${O}]} =~ '[a-z]' ]] && LETTER_OPT=${OPTS[${O}]}
		[[ ${O} -eq 1 && ${OPTS[${O}]} == ":" ]] && continue
		[[ ${O} -gt 1 && ${OPTS[${O}]} == ":" ]] && OPTSTRING+=$(opt_type ${LETTER_OPT}) && continue
		OPTSTRING+="-${OPTS[${O}]}"
	done
	echo ${OPTSTRING}
}

opt_exists () {
	local OPT=${1}
	[[ $(( $OPTIONS[(Ie)${OPT}] )) -ne 0 ]] && return 0 || return 1
}

opt_type () {
	local OPT=${1}
	case ${OPT} in
		d) echo "<DIR>";;
		f) echo "<FILE>";;
		s) echo "<SEPARATOR>";;
		t) echo "<FILE_TYPE>";;
		q) echo "<SQL_QUERY>";;
	esac
}

usage () {
	tabs 5
	[[ ${_SMCUP} == 'true' ]] && do_rmcup

	local OPTS=$(parse_opts ${OPTSTR})
	local -a PENDING_MSGS=(${@})
	echo -e "\n${WHITE_FG}Usage${RESET}: ${SCRIPT} ${WHITE_FG}[${RESET}${OPTS}${WHITE_FG}]${RESET} [$(opt_type q)]\n"
	echo -e "${WHITE_FG}-H${RESET} help"
	echo -e "${WHITE_FG}-D${RESET} debug"
	echo -e "${WHITE_FG}-l${RESET} list DB's in current directory"
	echo -e "${WHITE_FG}-p${RESET} print table contents"
	echo -e "${WHITE_FG}-s $(opt_type s)${RESET} separator"
	echo -e "${WHITE_FG}-t${RESET} show tables in DB"
	echo -e "\n${WHITE_FG}DESC${RESET}:${DESC}"

	echo "${PENDING_MSGS}"
}

typeset -a OPTIONS
OPTSTR=":HDld:pst"
OPTIND=0

SHOW_DBS=false
SHOW_TABS=false
SHOW_SCHEMA=false
PRINT_TAB=false
QUERY_STR=''

while getopts ${OPTSTR} OPTION;do
	case $OPTION in
     H) usage;;
     D) dbg_set_level;;
     l) SHOW_DBS=true;;
     d) g_DELIM=${OPTARG};;
     p) PRINT_TAB=true;;
     s) SHOW_SCHEMA=true;;
     t) SHOW_TABS=true;;
     :) print -u2 "${RED_FG}${SCRIPT}${RESET}: option: -${OPTARG} requires an argument"; usage;;
    \?) print -u2 "${RED_FG}${SCRIPT}${RESET}: unknown option -${OPTARG}"; usage;;
	esac
	[[ ${OPTION} != 'D' ]] && OPTIONS+=${OPTION}
done
shift $((OPTIND -1))
#--End GetOpts--

# Execution
#[[ ${_DEBUG} -eq 0 ]] && do_smcup
[[ ${#} -eq 0 && ${#OPTIONS} -eq 0 ]] && usage $(msg_warn "No operation specified") || QUERY_STR=${@}

if [[ ${SHOW_DBS} == 'true' ]];then
	set_db_list
	RC=${?}
	if [[ ${RC} -eq 0 ]];then
		sel_list_set ${(o)DB_LIST}

		_SEL_VAL=?
		sel_list "<w>Select database or <h>(q)uit<N>"
		[[ ${_SEL_VAL} == '?' ]] && exit_leave

		g_DB=${_SEL_VAL}

		msg_box_clear
	else
		exit_leave $(msg_warn "No databases found")
	fi
fi

if [[ ${SHOW_SCHEMA} == 'true' ]];then
	DB_LIST=("${(f)$(find . -maxdepth 1 -type f)}")

	if arr_is_populated "${DB_LIST}";then
		sel_list_set ${(o)DB_LIST}

		_SEL_VAL=?
		sel_list "<w>Select database or <h>(q)uit<N>"
		[[ ${_SEL_VAL} == '?' ]] && exit_leave

		g_DB=${_SEL_VAL}

		msg_box_clear
	else
		msg_box -p -PK "No databases found"
	fi

	TAB_LIST=($(query .tables))
	if arr_is_populated "${TAB_LIST}";then
		sel_list_set ${(o)TAB_LIST}

		_SEL_VAL=?
		sel_list "<w>Select table or <h>(q)uit<N>"
		[[ ${_SEL_VAL} == '?' ]] && exit_leave

		g_TB=${_SEL_VAL}
	else
		msg_box -p -PK "No tables found"
	fi

	echo "${RESET}Schema for TB:${g_TB}"
	query .schema ${g_TB} 
	RC=${?}
	[[ ${RC} -ne 0 ]] && echo $(msg_warn "sqlite3 returned an error:${RC}")
	exit_leave
fi

if [[ ${PRINT_TAB} == 'true' ]];then
	DB_LIST=("${(f)$(find . -maxdepth 1 -type f)}")

	if arr_is_populated "${DB_LIST}";then
		sel_list_set ${(o)DB_LIST}

		_SEL_VAL=?
		sel_list "<w>Select database or <h>(q)uit<N>"
		[[ ${_SEL_VAL} == '?' ]] && exit_leave

		g_DB=${_SEL_VAL}
	fi

	msg_box_clear

	TAB_LIST=($(query .tables))
	if arr_is_populated "${TAB_LIST}";then
		sel_list_set ${(o)TAB_LIST}

		_SEL_VAL=?
		sel_list "<w>Select table or <h>(q)uit<N>"
		[[ ${_SEL_VAL} == '?' ]] && exit_leave

		g_TB=${_SEL_VAL}
	fi

	echo "${RESET}Contents of TB:${g_TB}"
	query "select * from ${g_TB}"
	RC=${?}
	[[ ${RC} -ne 0 ]] && echo $(msg_warn "sqlite3 returned an error:${RC}")

	exit_leave
fi

[[ -n ${QUERY_STR} ]] && query ${QUERY_STR}
RC=${?}
[[ ${RC} -ne 0 ]] && exit_leave $(msg_err "sqlite3 returned an error:${RC}")

exit_leave
